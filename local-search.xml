<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>TypeScript笔记(三)</title>
    <link href="/2020/10/31/typescript-learn-note03/"/>
    <url>/2020/10/31/typescript-learn-note03/</url>
    
    <content type="html"><![CDATA[<h2 id="章前知识"><a href="#章前知识" class="headerlink" title="章前知识"></a>章前知识</h2><p>1.在JavaScript中，所有的string类型（或者被称为DOMString）都是使用UTF-16编码的，至于为什么，度娘知道。<br>2.JS字符编码———— ASCII || Unicode || UTF-8</p><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>1.ascii编码通常是用1个字节表示字符，使用7位二进制数表示（剩下的1位为0，即0xxxxxxx），通常用来表示26个英文字母的大小写、数字0-9、标点符号以及一些特殊字符。<br>2.Unicode编码通常用2个字节表示字符，一些较为偏僻的字符就需要用到4个字节。<br>3.UTF-8编码是Unicode的实现方式之一，通常用3个字节表示1个汉字（UTF-8中文编码范围：u4e00-u9fa5，0x3400-0x4DB5）。</p><p>还有一些字符编码如gbk之类的，需要用再查询研究了。</p><h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><p>如果只有一个字节则其最高二进制位为0；如果是多字节，其第一个字节从最高位开始，连续的二进制位值为1的个数决定了其编码的位数，其余各字节均以10开头。UTF-8最多可用到6个字节。 </p><p>-1字节：0xxxxxxx<br>-2字节：110xxxxx 10xxxxxx<br>-3字节：1110xxxx 10xxxxxx 10xxxxxx<br>-4字节：11110xxx 10xxxxxx 10xxxxxx 10xxxxxx<br>-5字节：111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx<br>-6字节：1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>部分代码尚未读懂，后续待增加注释。</p><pre><code class="hljs angelscript">export <span class="hljs-keyword">class</span> <span class="hljs-symbol">StringCode</span>&#123;<span class="hljs-keyword">private</span> static inRange(a:number, min:number, max:number): <span class="hljs-built_in">bool</span>ean &#123;    <span class="hljs-keyword">return</span> min &lt;= a &amp;&amp; a &lt;= max;&#125;<span class="hljs-comment">/**  */</span><span class="hljs-keyword">private</span> static <span class="hljs-built_in">string</span>ToCodePoints(<span class="hljs-built_in">string</span>: <span class="hljs-built_in">string</span>): Array&lt;number&gt; &#123;let cps = [];let i = <span class="hljs-number">0</span>, n = <span class="hljs-built_in">string</span>.length;<span class="hljs-keyword">while</span> (i &lt; <span class="hljs-built_in">string</span>.length) &#123;let c = <span class="hljs-built_in">string</span>.charCodeAt(i);<span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.inRange(c, <span class="hljs-number">0xD800</span>, <span class="hljs-number">0xDFFF</span>)) &#123;cps.push(c);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.inRange(c, <span class="hljs-number">0xDC00</span>, <span class="hljs-number">0xDFFF</span>)) &#123;cps.push(<span class="hljs-number">0xFFFD</span>);&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// (inRange(c, 0xD800, 0xDBFF))</span><span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">1</span>) &#123;cps.push(<span class="hljs-number">0xFFFD</span>);&#125; <span class="hljs-keyword">else</span> &#123;let d = <span class="hljs-built_in">string</span>.charCodeAt(i + <span class="hljs-number">1</span>);<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.inRange(d, <span class="hljs-number">0xDC00</span>, <span class="hljs-number">0xDFFF</span>)) &#123;let a = c &amp; <span class="hljs-number">0x3FF</span>;let b = d &amp; <span class="hljs-number">0x3FF</span>;i += <span class="hljs-number">1</span>;cps.push(<span class="hljs-number">0x10000</span> + (a &lt;&lt; <span class="hljs-number">10</span>) + b);&#125; <span class="hljs-keyword">else</span> &#123;cps.push(<span class="hljs-number">0xFFFD</span>);&#125;&#125;&#125;i += <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">return</span> cps;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * u8intarray转utf-8</span><span class="hljs-comment"> * @param array Uint8Array字节流</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> static u8ArrayToUtf8Str(<span class="hljs-built_in">array</span>: Uint8Array): <span class="hljs-built_in">string</span> &#123;var <span class="hljs-keyword">out</span>, i, len, c;var char2, char3;<span class="hljs-keyword">out</span> = <span class="hljs-string">&quot;&quot;</span>;len = <span class="hljs-built_in">array</span>.length;i = <span class="hljs-number">0</span>;<span class="hljs-keyword">while</span> (i &lt; len) &#123;c = <span class="hljs-built_in">array</span>[i++];<span class="hljs-keyword">switch</span> (c &gt;&gt; <span class="hljs-number">4</span>) &#123;<span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<span class="hljs-comment">// 0xxxxxxx 1个字节</span><span class="hljs-keyword">out</span> += String.fromCharCode(c);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">12</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">13</span>:<span class="hljs-comment">// 110xxxxx 10xxxxxx 2个字节</span>char2 = <span class="hljs-built_in">array</span>[i++];<span class="hljs-keyword">out</span> += String.fromCharCode(((c &amp; <span class="hljs-number">0x1F</span>) &lt;&lt; <span class="hljs-number">6</span>) | (char2 &amp; <span class="hljs-number">0x3F</span>));<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">14</span>:<span class="hljs-comment">// 1110xxxx 10xxxxxx 10xxxxxx 3个字节</span>char2 = <span class="hljs-built_in">array</span>[i++];char3 = <span class="hljs-built_in">array</span>[i++];<span class="hljs-keyword">out</span> += String.fromCharCode(((c &amp; <span class="hljs-number">0x0F</span>) &lt;&lt; <span class="hljs-number">12</span>) |((char2 &amp; <span class="hljs-number">0x3F</span>) &lt;&lt; <span class="hljs-number">6</span>) |((char3 &amp; <span class="hljs-number">0x3F</span>) &lt;&lt; <span class="hljs-number">0</span>));<span class="hljs-keyword">break</span>;&#125;&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">out</span>;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * utf-8转u8intarray</span><span class="hljs-comment"> * @param str string 字符串</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> static utf8StrToU8Array(str: <span class="hljs-built_in">string</span>):Uint8Array &#123;let pos:number = <span class="hljs-number">0</span>;let codePoints = <span class="hljs-keyword">this</span>.<span class="hljs-built_in">string</span>ToCodePoints(str);let outputBytes = [];<span class="hljs-keyword">while</span> (codePoints.length &gt; pos) &#123;let code_point:number = codePoints[pos++];<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.inRange(code_point, <span class="hljs-number">0xD800</span>, <span class="hljs-number">0xDFFF</span>)) &#123;console.error(<span class="hljs-string">&quot;UTF8 encoderError&quot;</span>,code_point)&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.inRange(code_point, <span class="hljs-number">0x0000</span>, <span class="hljs-number">0x007f</span>)) &#123;outputBytes.push(code_point);&#125; <span class="hljs-keyword">else</span> &#123;let count = <span class="hljs-number">0</span>, offset = <span class="hljs-number">0</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.inRange(code_point, <span class="hljs-number">0x0080</span>, <span class="hljs-number">0x07FF</span>)) &#123;count = <span class="hljs-number">1</span>;offset = <span class="hljs-number">0xC0</span>;&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.inRange(code_point, <span class="hljs-number">0x0800</span>, <span class="hljs-number">0xFFFF</span>)) &#123;count = <span class="hljs-number">2</span>;offset = <span class="hljs-number">0xE0</span>;&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.inRange(code_point, <span class="hljs-number">0x10000</span>, <span class="hljs-number">0x10FFFF</span>)) &#123;count = <span class="hljs-number">3</span>;offset = <span class="hljs-number">0xF0</span>;&#125;outputBytes.push(Math.floor(code_point/Math.pow(<span class="hljs-number">64</span>, count)) + offset);<span class="hljs-keyword">while</span> (count &gt; <span class="hljs-number">0</span>) &#123;let temp = Math.floor(code_point/Math.pow(<span class="hljs-number">64</span>, count - <span class="hljs-number">1</span>));outputBytes.push(<span class="hljs-number">0x80</span> + (temp % <span class="hljs-number">64</span>));count -= <span class="hljs-number">1</span>;&#125;&#125;&#125;<span class="hljs-keyword">return</span> new Uint8Array(outputBytes);&#125;&#125;</code></pre><p>-<a href="http://www.ruanyifeng.com/blog/2008/06/base64.html">参考博文：Base64笔记</a><br>-<a href="http://blog.chinaunix.net/uid-52437-id-3325514.html">参考博文：js下，二进制数据（编码utf8编码方式）转换到字符串</a><br>-<a href="https://blog.csdn.net/machinecat5888/article/details/81490930">参考博文：UTF-8编码规则</a></p>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript笔记(二)</title>
    <link href="/2020/10/31/typescript-learn-note02/"/>
    <url>/2020/10/31/typescript-learn-note02/</url>
    
    <content type="html"><![CDATA[<style>    p {        text-indent: 2rem;    }</style><h2 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h2><ul><li>普通函数</li><li>箭头函数</li></ul><h3 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h3><p>this永远指向的是最后调用它的对象，也就是看它执行的时候是谁调用的。</p><pre><code class="hljs javascript"><span class="hljs-comment">//例子1</span><span class="hljs-comment">//引用logger的printName方法</span><span class="hljs-comment">//调用的时候是window环境</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Logger</span> </span>&#123;  <span class="hljs-function"><span class="hljs-title">printName</span>(<span class="hljs-params">name = <span class="hljs-string">&#x27;there&#x27;</span></span>)</span> &#123;    <span class="hljs-built_in">this</span>.print(<span class="hljs-string">`Hello <span class="hljs-subst">$&#123;name&#125;</span>`</span>);  &#125;  <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-params">text</span>)</span> &#123;    <span class="hljs-built_in">console</span>.log(text);  &#125;&#125;<span class="hljs-keyword">const</span> logger = <span class="hljs-keyword">new</span> Logger();<span class="hljs-keyword">const</span> &#123; printName &#125; = logger;printName(); <span class="hljs-comment">//报错print no undefined</span></code></pre><p>稍作修改，把printName方法绑定在logger类中。</p><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Logger</span> </span>&#123;  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;    <span class="hljs-built_in">this</span>.printName = <span class="hljs-built_in">this</span>.printName.bind(<span class="hljs-built_in">this</span>);  &#125;    <span class="hljs-function"><span class="hljs-title">printName</span>(<span class="hljs-params">name = <span class="hljs-string">&#x27;there&#x27;</span></span>)</span> &#123;    <span class="hljs-built_in">this</span>.print(<span class="hljs-string">`Hello <span class="hljs-subst">$&#123;name&#125;</span>`</span>);  &#125;  <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-params">text</span>)</span> &#123;    <span class="hljs-built_in">console</span>.log(text);  &#125;&#125;<span class="hljs-keyword">const</span> logger = <span class="hljs-keyword">new</span> Logger();<span class="hljs-keyword">const</span> &#123; printName &#125; = logger;printName(); <span class="hljs-comment">//hello there</span></code></pre><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>this指向它的上下文环境。</p><pre><code class="hljs javascript"><span class="hljs-comment">//箭头函数</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Obj</span> </span>&#123;  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;      <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;Lily&quot;</span>;      <span class="hljs-built_in">this</span>.getName = <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">this</span>.name;  &#125;&#125;<span class="hljs-keyword">const</span> myObj = <span class="hljs-keyword">new</span> Obj();<span class="hljs-keyword">const</span> &#123; getName &#125; = myObj ;getName(); <span class="hljs-comment">//Lily </span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>下面是其他的几个例子。</p><pre><code class="hljs javascript"><span class="hljs-comment">//普通函数</span><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;my name is window&#x27;</span>;  <span class="hljs-keyword">var</span> obj = &#123;      name: <span class="hljs-string">&#x27;my name is obj&#x27;</span>,      fn: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;          <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;          <span class="hljs-built_in">clearInterval</span>(timer);          timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;              <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);  <span class="hljs-comment">//my name is window</span>          &#125;, <span class="hljs-number">1000</span>)     &#125; &#125;<span class="hljs-comment">//箭头函数</span><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;my name is window&#x27;</span>;  <span class="hljs-keyword">var</span> obj = &#123;      name: <span class="hljs-string">&#x27;my name is obj&#x27;</span>,      fn: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;          <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;          <span class="hljs-built_in">clearInterval</span>(timer);          timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;              <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);  <span class="hljs-comment">//my name is obj</span>          &#125;, <span class="hljs-number">1000</span>)     &#125; &#125; <span class="hljs-comment">//其余写法，利用变量赋值this</span> <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;my name is window&quot;</span>;   <span class="hljs-keyword">var</span> obj = &#123;      name: <span class="hljs-string">&#x27;my name is obj&#x27;</span>,      self = <span class="hljs-built_in">this</span>;       fn: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;          <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;          <span class="hljs-built_in">clearInterval</span>(timer);          timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;              <span class="hljs-built_in">console</span>.log(self.name);  <span class="hljs-comment">//my name is obj</span>          &#125;, <span class="hljs-number">1000</span>)     &#125; &#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript笔记(一)</title>
    <link href="/2020/10/31/typescript-learn-note01/"/>
    <url>/2020/10/31/typescript-learn-note01/</url>
    
    <content type="html"><![CDATA[<style>    p {        text-indent: 2rem;    }</style><h2 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h2><p>interface：接口，其作用与函数有点类似，函数规定了需要传递哪些参数，而接口则是规定某个对象应该拥有哪些属性或方法（只是声明成员方法，不作实现）。</p><pre><code class="hljs angelscript"><span class="hljs-comment">// IBagView 和 IItemView 就是一个接口</span><span class="hljs-keyword">interface</span> <span class="hljs-symbol">IBagView</span> &#123;    time: number;    count?: number; <span class="hljs-comment">//可选参数</span>    update(<span class="hljs-built_in">int</span>erval: number);    <span class="hljs-built_in">ref</span>resh();&#125;<span class="hljs-keyword">interface</span> <span class="hljs-symbol">IItemView</span> &#123;    updateItem(item, args);&#125;</code></pre><h2 id="implements"><a href="#implements" class="headerlink" title="implements"></a>implements</h2><p>implements：实现，实现对应接口的对应方法或者环境变量，可以使用一个或者多个包含能的接口。实现了接口的类必须包含接口的所有成员方法。</p><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">BagView</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">IBagView, <span class="hljs-symbol">IItemView</span></span> &#123;    <span class="hljs-keyword">public</span> time = <span class="hljs-number">0</span>;    <span class="hljs-keyword">public</span> update(<span class="hljs-built_in">int</span>erval, number) &#123;&#125;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">ref</span>resh():<span class="hljs-built_in">void</span>  &#123;&#125;    <span class="hljs-keyword">public</span> updateItem(item: any) &#123;&#125;    <span class="hljs-keyword">public</span> update(item, args) &#123;&#125;&#125;</code></pre><h2 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h2><p>extends：继承，继承的子类可以选择不需要重新定义类的结构及成员方法，如果子类重写了，则对象的方法或者变量会被子类覆盖。</p><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonBagView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BagView</span></span><span class="hljs-class"></span>&#123;    constructor() &#123;        <span class="hljs-keyword">super</span>();    &#125;    public refresh():void  &#123;        <span class="hljs-comment">//会覆盖父级的方法</span>        <span class="hljs-comment">//可以使用super.refresh();进行继承</span>    &#125;&#125;</code></pre><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型：泛型多被用来创建可重用的组件，一个组件可以支持多种数据类型。</p><h3 id="假如不使用泛型"><a href="#假如不使用泛型" class="headerlink" title="假如不使用泛型"></a>假如不使用泛型</h3><pre><code class="hljs csharp"><span class="hljs-comment">//这种数据类型就规定了必须使用Number类型</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">getParam</span>(<span class="hljs-params">param: number</span>): number</span> &#123;    <span class="hljs-keyword">return</span> param;&#125;<span class="hljs-comment">//如果使用any，就无法准确知晓它的返回值类型</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">getParam</span>(<span class="hljs-params">param: any</span>): any</span> &#123;    <span class="hljs-keyword">return</span> param;&#125;</code></pre><h3 id="使用泛型"><a href="#使用泛型" class="headerlink" title="使用泛型"></a>使用泛型</h3><pre><code class="hljs csharp"><span class="hljs-comment">//传入什么类型，返回值就是什么类型</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">getParam</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">param: T</span>): T</span> &#123;    <span class="hljs-keyword">return</span> param;&#125;</code></pre><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><pre><code class="hljs csharp"><span class="hljs-comment">//配合interface使用可以对泛型进行约束</span><span class="hljs-comment">//当然，被约束的泛型不再适用于任意类型</span><span class="hljs-keyword">interface</span> <span class="hljs-title">IBaseView</span> &#123;    viewName: <span class="hljs-built_in">string</span>;    viewId: number;&#125;<span class="hljs-comment">//getView方法中进行了泛型约束</span><span class="hljs-comment">//那么调用这个方法时必须满足IBaseView的接口条件</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">getView</span>&lt;<span class="hljs-title">T</span> <span class="hljs-title">extends</span> <span class="hljs-title">IBaseView</span>&gt;(<span class="hljs-params">view: T</span>): T</span> &#123;    <span class="hljs-keyword">return</span> view;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>几个非常用运算符</title>
    <link href="/2020/10/31/network-programming-note2/"/>
    <url>/2020/10/31/network-programming-note2/</url>
    
    <content type="html"><![CDATA[<h3 id="二进制转化"><a href="#二进制转化" class="headerlink" title="二进制转化"></a>二进制转化</h3><p style="text-indent:2rem;">以下运算符涉及二进制转化，此处说明一下十进制转换为二进制的方法：除二取余法。（除以2取余数，余数逆序排列.。二进制数一般为32位，不够的往前面添0。）</p><pre><code class="hljs [javascript]">&#x2F;&#x2F;十进制数转换为二进制&#x2F;&#x2F;例子一：5&#x2F;&#x2F;5&#x2F;2 &#x3D; 2 ... 1&#x2F;&#x2F;2&#x2F;2 &#x3D; 1 ... 0&#x2F;&#x2F;1&#x2F;2 &#x3D; 0 ... 1&#x2F;&#x2F;因此，（十进制数）5转化为（二进制数）就是101，二进制数一般为32位，不够的往前面添0。&#x2F;&#x2F;即0000 0000 0000 0000  0000 0000 0000 0101&#x2F;&#x2F;例子二：24&#x2F;&#x2F;24&#x2F;2 &#x3D; 12 ... 0&#x2F;&#x2F;12&#x2F;2 &#x3D; 6  ... 0&#x2F;&#x2F;6&#x2F;2 &#x3D; 3   ... 0&#x2F;&#x2F;3&#x2F;2 &#x3D; 1   ... 1&#x2F;&#x2F;1&#x2F;2 &#x3D; 0   ... 1&#x2F;&#x2F;因此，（十进制数）24转化为（二进制数）就是11000，二进制数一般为32位，不够的往前面添0。&#x2F;&#x2F;即0000 0000 0000 0000  0000 0000 0001 1000&#x2F;&#x2F;例子三：20&#x2F;&#x2F;20&#x2F;2 &#x3D; 10 ... 0&#x2F;&#x2F;10&#x2F;2 &#x3D; 5  ... 0&#x2F;&#x2F;5&#x2F;2 &#x3D; 2   ... 1&#x2F;&#x2F;2&#x2F;2 &#x3D; 1   ... 0&#x2F;&#x2F;1&#x2F;2 &#x3D; 0   ... 1&#x2F;&#x2F;即0000 0000 0000 0000  0000 0000 0001 0100</code></pre><h3 id="“-lt-lt-”运算符"><a href="#“-lt-lt-”运算符" class="headerlink" title="“&lt;&lt;”运算符"></a>“&lt;&lt;”运算符</h3><pre><code class="hljs [javascript]">&#x2F;&#x2F;&quot;&lt;&lt;&quot;运算符：用于对二进制数左移多少位。1 &lt;&lt; 0 &#x2F;&#x2F;结果：11 &lt;&lt; 1 &#x2F;&#x2F;结果：21 &lt;&lt; 2 &#x2F;&#x2F;结果：41 &lt;&lt; 10 &#x2F;&#x2F;结果：10245 &lt;&lt; 10 &#x2F;&#x2F;结果：5120&#x2F;&#x2F;由上可得x &lt;&lt; y 相当于 x * 2^y&#x2F;&#x2F;较为常用的例子：const kb &#x3D; 1 &lt;&lt; 10; &#x2F;&#x2F;1024const mb &#x3D; kb &lt;&lt; 10; &#x2F;&#x2F;1048576const tb &#x3D; mb &lt;&lt; 10; const gb &#x3D; tb &lt;&lt; 10;</code></pre><h3 id="“-amp-”运算符"><a href="#“-amp-”运算符" class="headerlink" title="“&amp;”运算符"></a>“&amp;”运算符</h3><pre><code class="hljs [javascript]">&#x2F;&#x2F;&quot;&amp;&quot;运算符：用于对两个二进制操作数逐位“位与”进行比较。&#x2F;&#x2F;“位与”即1&amp;&amp;1&#x3D;&#x3D;1, 1&amp;&amp;0&#x3D;&#x3D;0, 0&amp;&amp;0&#x3D;&#x3D;0&#x2F;&#x2F;平时我们使用的数字都是十进制数，该方法是对转化后的二进制数进行比较。&#x2F;&#x2F;&quot;&amp;&quot;运算符就是比较二进制中为true的值提取出来，然后逐位计算true或false。24 &amp; 5 &#x2F;&#x2F;结果：0&#x2F;&#x2F;具体规则：逐位进行比较，例如1 &amp;&amp; 0 结果就是 0&#x2F;&#x2F;数值5： 0000 0000 0000 0000  0000 0000 0000 0101&#x2F;&#x2F;数值24：0000 0000 0000 0000  0000 0000 0001 1000&#x2F;&#x2F;结果：  0000 0000 0000 0000  0000 0000 0000 000024 &amp; 20 &#x2F;&#x2F;结果：16&#x2F;&#x2F;数值24：0000 0000 0000 0000  0000 0000 0001 1000&#x2F;&#x2F;数值20：0000 0000 0000 0000  0000 0000 0001 0100&#x2F;&#x2F;结果：  0000 0000 0000 0000  0000 0000 0001 0000</code></pre><h3 id="“-”运算符"><a href="#“-”运算符" class="headerlink" title="“^”运算符"></a>“^”运算符</h3><pre><code class="hljs [javascript]">&#x2F;&#x2F;&quot;^&quot;运算符：用于对两个二进制操作数逐位“位异或”进行比较。&#x2F;&#x2F;“位异或”即1&amp;&amp;0&#x3D;&#x3D;1 1&amp;&amp;1&#x3D;&#x3D;0 0&amp;&amp;0&#x3D;&#x3D;024 &amp; 5 &#x2F;&#x2F;结果：29&#x2F;&#x2F;具体规则：逐位进行比较，例如1 &amp;&amp; 0 结果就是 1&#x2F;&#x2F;数值5： 0000 0000 0000 0000  0000 0000 0000 0101&#x2F;&#x2F;数值24：0000 0000 0000 0000  0000 0000 0001 1000&#x2F;&#x2F;结果：  0000 0000 0000 0000  0000 0000 0001 1101</code></pre><h3 id="“-”运算符-1"><a href="#“-”运算符-1" class="headerlink" title="“|”运算符"></a>“|”运算符</h3><pre><code class="hljs [javascript]">&#x2F;&#x2F;&quot;|&quot;运算符用于对两个二进制操作数逐位进行“位或”比较。&#x2F;&#x2F;“位与”即1||1&#x3D;&#x3D;1, 1||0&#x3D;&#x3D;1, 0||0&#x3D;&#x3D;0&#x2F;&#x2F;其他与&quot;&amp;&quot;运算符相似24 &amp; 5 &#x2F;&#x2F;结果：29&#x2F;&#x2F;具体规则：逐位进行比较，例如1 &amp;&amp; 0 结果就是 1&#x2F;&#x2F;数值5： 0000 0000 0000 0000  0000 0000 0000 0101&#x2F;&#x2F;数值24：0000 0000 0000 0000  0000 0000 0001 1000&#x2F;&#x2F;结果：  0000 0000 0000 0000  0000 0000 0001 1101</code></pre><h3 id="“-”运算符-2"><a href="#“-”运算符-2" class="headerlink" title="“~”运算符"></a>“~”运算符</h3><pre><code class="hljs [javascript]">&#x2F;&#x2F;&quot;~&quot;运算符：简单理解为取负运算，再减去1~24 &#x2F;&#x2F;结果：-25 即：-24-1~10 &#x2F;&#x2F;结果：-11 即：-10-1</code></pre>]]></content>
    
    
    <categories>
      
      <category>网络编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>各进制数之间的转换</title>
    <link href="/2020/10/31/network-programming-note1/"/>
    <url>/2020/10/31/network-programming-note1/</url>
    
    <content type="html"><![CDATA[<h2 id="其他进制数转换为10进制数"><a href="#其他进制数转换为10进制数" class="headerlink" title="其他进制数转换为10进制数"></a>其他进制数转换为10进制数</h2><p>其他进制数转10进制数算法：从尾巴开始算起，依次乘以对应数值（例如2进制除数就是2,16进制除数就是16）的0~n次方（n值为尾巴算起的第几位-1，这里的尾巴起点仅代表个位数，如果有小数，则从-1次方开始算起）</p><pre><code class="hljs javascript"><span class="hljs-comment">//16进制数：0x07ff</span><span class="hljs-comment">//转化为10进制数的算法：f*16^0 + f*16^1 + 7*16^2 = 2047</span><span class="hljs-comment">//8进制数：52</span><span class="hljs-comment">//转化为10进制数的算法：2*8^0 + 5*8^1 = 42</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">otherToVal10</span>(<span class="hljs-params">num, val</span>)</span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">let</span> arr = [];<span class="hljs-keyword">let</span> numStr = num.toString();<span class="hljs-built_in">console</span>.log(numStr)arr = <span class="hljs-built_in">parseInt</span>(num) == num? arr.push(numStr) : arr.concat(numStr.split(<span class="hljs-string">&quot;.&quot;</span>));<span class="hljs-keyword">let</span> squareMax = arr[<span class="hljs-number">0</span>].length - <span class="hljs-number">1</span>;<span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr[<span class="hljs-number">0</span>].length; i++)&#123;result += <span class="hljs-built_in">Number</span>(arr[<span class="hljs-number">0</span>][i]) * <span class="hljs-built_in">Math</span>.pow(jinzhi, squareMax - i);&#125;<span class="hljs-keyword">if</span> (arr.length &gt; <span class="hljs-number">1</span>)&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr[<span class="hljs-number">1</span>].length; i++)&#123;result += <span class="hljs-built_in">Number</span>(arr[<span class="hljs-number">1</span>][i]) * <span class="hljs-built_in">Math</span>.pow(jinzhi, <span class="hljs-number">0</span> - <span class="hljs-number">1</span> - i);&#125;&#125;<span class="hljs-keyword">return</span> result;&#125;</code></pre><h2 id="10进制数转换为其他进制数"><a href="#10进制数转换为其他进制数" class="headerlink" title="10进制数转换为其他进制数"></a>10进制数转换为其他进制数</h2><p>10进制数转化为其他进制，只需要除以对应数值（例如2进制除数就是2,16进制除数就是16），记下商和余数；然后用商除以除数，继续记下商和余数；重复以上步骤直到商为0为止。然后余数逆序排列，就是对应要转化的进制数的结果。</p><pre><code class="hljs reasonml"><span class="hljs-comment">//10进制数：100</span><span class="hljs-comment">//转化为2进制数：</span><span class="hljs-comment">/**</span><span class="hljs-comment">* 100 / 2   商：50 余：0</span><span class="hljs-comment">*  50 / 2   商：25 余：0</span><span class="hljs-comment">*  25 / 2   商：12 余：1</span><span class="hljs-comment">*  12 / 2   商： 6 余：0</span><span class="hljs-comment">*   6 / 2   商： 3 余：0</span><span class="hljs-comment">*   3 / 2   商： 1 余：1</span><span class="hljs-comment">*   1 / 2   商： 0 余：1</span><span class="hljs-comment">**/</span><span class="hljs-comment">//结果：1100100</span><span class="hljs-comment">//10进制数：100</span><span class="hljs-comment">//转化为16进制数：</span><span class="hljs-comment">/**</span><span class="hljs-comment">* 100 / 16  商：6 余：4</span><span class="hljs-comment">*   6 / 16  商：0 余：6</span><span class="hljs-comment">**/</span><span class="hljs-comment">//结果：64</span><span class="hljs-keyword">function</span> <span class="hljs-constructor">Val10ToVal(<span class="hljs-params">num</span>, <span class="hljs-params">val</span>)</span>&#123;<span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;<span class="hljs-keyword">let</span> remainderArr = <span class="hljs-literal">[]</span>;<span class="hljs-keyword">do</span> &#123;<span class="hljs-keyword">let</span> remainder = num % <span class="hljs-keyword">val</span>;remainderArr.push(remainder);num = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>floor(num<span class="hljs-operator"> / </span><span class="hljs-keyword">val</span>);&#125;<span class="hljs-keyword">while</span> (num != <span class="hljs-number">0</span>)console.log(remainderArr);remainderArr = remainderArr.reverse<span class="hljs-literal">()</span>;result = <span class="hljs-constructor">Number(<span class="hljs-params">remainderArr</span>.<span class="hljs-params">join</span>(<span class="hljs-string">&quot;&quot;</span>)</span>);return result;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>网络编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>努力，是为了遇见更好的自己。</title>
    <link href="/2020/10/31/hello-liuyifeng/"/>
    <url>/2020/10/31/hello-liuyifeng/</url>
    
    <content type="html"><![CDATA[<p style="text-indent:2rem;">生活依旧在继续，你能做的唯有努力。</p>]]></content>
    
    
    <categories>
      
      <category>我的随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我的随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
