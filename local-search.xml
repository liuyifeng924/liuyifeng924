<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>NodeJS服务器学习笔记（三）</title>
    <link href="/2020/12/26/nodejs-note003/"/>
    <url>/2020/12/26/nodejs-note003/</url>
    
    <content type="html"><![CDATA[<p>使用nodejs-websocket + protobuf搭建服务器。</p><a id="more"></a><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="新建package-json文件"><a href="#新建package-json文件" class="headerlink" title="新建package.json文件"></a>新建package.json文件</h3><p>新建server文件夹，并新建package.json文件。</p><pre><code class="hljs routeros">$ mkdir<span class="hljs-built_in"> server </span>&amp;&amp; cd server$ cnpm init -y</code></pre><p>package.json：</p><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;sanguo-server&quot;</span>,  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.1.0&quot;</span>,  <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,  <span class="hljs-attr">&quot;dependencies&quot;</span>: &#123;    <span class="hljs-attr">&quot;nodejs-websocket&quot;</span>: <span class="hljs-string">&quot;^1.7.2&quot;</span>,    <span class="hljs-attr">&quot;protobufjs&quot;</span>: <span class="hljs-string">&quot;^6.10.2&quot;</span>  &#125;,  <span class="hljs-attr">&quot;main&quot;</span>: <span class="hljs-string">&quot;app.js&quot;</span>,  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;&#125;,  <span class="hljs-attr">&quot;keywords&quot;</span>: [],  <span class="hljs-attr">&quot;author&quot;</span>: <span class="hljs-string">&quot;liuyifeng&quot;</span>&#125;</code></pre><h3 id="安装websocket"><a href="#安装websocket" class="headerlink" title="安装websocket"></a>安装websocket</h3><pre><code class="hljs cmake">$ cnpm <span class="hljs-keyword">install</span> nodejs-websocket</code></pre><h3 id="安装protobufjs"><a href="#安装protobufjs" class="headerlink" title="安装protobufjs"></a>安装protobufjs</h3><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>cnpm install protobufjs<span class="hljs-variable">$ </span>cnpm install <span class="hljs-variable">@egret</span>/protobuf -g</code></pre><h2 id="引入Protobuf"><a href="#引入Protobuf" class="headerlink" title="引入Protobuf"></a>引入Protobuf</h2><h3 id="新建proto目录"><a href="#新建proto目录" class="headerlink" title="新建proto目录"></a>新建proto目录</h3><pre><code class="hljs dockerfile">$ pb-egret <span class="hljs-keyword">add</span></code></pre><p>pbconfig.json文件：</p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;options&quot;</span>: &#123;        <span class="hljs-attr">&quot;no-create&quot;</span>: <span class="hljs-literal">true</span>,        <span class="hljs-attr">&quot;no-verify&quot;</span>: <span class="hljs-literal">true</span>,        <span class="hljs-attr">&quot;no-convert&quot;</span>: <span class="hljs-literal">true</span>,        <span class="hljs-attr">&quot;no-delimited&quot;</span>: <span class="hljs-literal">false</span>,        <span class="hljs-attr">&quot;no-encode&quot;</span>: <span class="hljs-literal">false</span>,        <span class="hljs-attr">&quot;no-decode&quot;</span>: <span class="hljs-literal">false</span>    &#125;,    <span class="hljs-attr">&quot;sourceRoot&quot;</span>: <span class="hljs-string">&quot;protofile&quot;</span>,    <span class="hljs-attr">&quot;outputFile&quot;</span>: <span class="hljs-string">&quot;bundles/protobuf.js&quot;</span>&#125;</code></pre><h3 id="新建proto文件"><a href="#新建proto文件" class="headerlink" title="新建proto文件"></a>新建proto文件</h3><p>新建login.proto文件，放在…/protobuf/protofile目录下</p><pre><code class="hljs perl"><span class="hljs-keyword">package</span> sanguo;message LoginRe<span class="hljs-string">q &#123;</span><span class="hljs-string">    required int32 uid = 1;</span><span class="hljs-string">&#125;</span></code></pre><h3 id="生成js文件和-d-ts文件"><a href="#生成js文件和-d-ts文件" class="headerlink" title="生成js文件和.d.ts文件"></a>生成js文件和.d.ts文件</h3><pre><code class="hljs verilog">$ pb-egret <span class="hljs-keyword">generate</span></code></pre><p>如果需要生成对应的js文件可以执行以下命令：</p><pre><code class="hljs gradle">$ pbjs -t <span class="hljs-keyword">static</span>-module -w commonjs -o .<span class="hljs-regexp">/protobuf/</span>protofile<span class="hljs-regexp">/login.js ./</span>protobuf<span class="hljs-regexp">/protofile/</span>login.proto$ pbjs -t <span class="hljs-keyword">static</span>-module -w commonjs -o .<span class="hljs-regexp">/protobuf/</span>protofile<span class="hljs-regexp">/common.js ./</span>protobuf<span class="hljs-regexp">/protofile/</span>*.proto</code></pre><h2 id="使用Protobuf及websocket"><a href="#使用Protobuf及websocket" class="headerlink" title="使用Protobuf及websocket"></a>使用Protobuf及websocket</h2><ul><li>拷贝protobuf/bundles/protobuf.d.ts到client/libs目录下</li><li>拷贝protobuf/library/protobuf-library.d.ts到client/libs目录下</li><li>拷贝protobuf/bundles/protobuf.min.js到client/bin/libs目录下</li><li>拷贝protobuf/library/protobuf-library.min.js到client/bin/libs目录下</li></ul><p>Laya可以在IDE直接F9然后在类库管理勾选刚刚添加的.js文件保存即可。其他引擎需要在对应的地方自行引入。</p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>只贴关键部分，本例以Laya示例2D项目为例子 。</p><pre><code class="hljs csharp"><span class="hljs-keyword">private</span> _socket: Laya.Socket;<span class="hljs-keyword">this</span>._socket = <span class="hljs-keyword">new</span> Laya.Socket();<span class="hljs-comment">//创建 socket 对象</span><span class="hljs-keyword">this</span>._socket.connectByUrl(<span class="hljs-string">&quot;ws://localhost:8001&quot;</span>);<span class="hljs-comment">//建立连接</span><span class="hljs-keyword">this</span>._socket.<span class="hljs-keyword">on</span>(Laya.Event.OPEN, <span class="hljs-keyword">this</span>, <span class="hljs-keyword">this</span>.onConnect);<span class="hljs-comment">//连接正常打开抛出的事件</span><span class="hljs-keyword">this</span>._socket.<span class="hljs-keyword">on</span>(Laya.Event.MESSAGE, <span class="hljs-keyword">this</span>, <span class="hljs-keyword">this</span>.onReceive);<span class="hljs-comment">//接收到消息抛出的事件</span><span class="hljs-keyword">this</span>._socket.<span class="hljs-keyword">on</span>(Laya.Event.CLOSE, <span class="hljs-keyword">this</span>, <span class="hljs-keyword">this</span>.closeHandler);<span class="hljs-comment">//socket关闭抛出的事件</span><span class="hljs-keyword">this</span>._socket.<span class="hljs-keyword">on</span>(Laya.Event.ERROR, <span class="hljs-keyword">this</span>, <span class="hljs-keyword">this</span>.errorHandler);<span class="hljs-comment">//连接出错抛出的事件</span><span class="hljs-comment">/**连接成功*/</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">onConnect</span>(<span class="hljs-params">e:Laya.Event</span>)</span>&#123;        console.log(<span class="hljs-string">&quot;ClientSocket 连接成功&quot;</span>);        <span class="hljs-keyword">let</span> loginData:sanguo.LoginReq = <span class="hljs-keyword">new</span> sanguo.LoginReq();        loginData.uid = <span class="hljs-number">1234567</span>;        <span class="hljs-keyword">let</span> buffer = sanguo.LoginReq.encode(loginData).finish();        <span class="hljs-keyword">this</span>.send(buffer);    &#125;        <span class="hljs-comment">/**</span><span class="hljs-comment">     * 发送数据</span><span class="hljs-comment">     * @param cmd 数据协议</span><span class="hljs-comment">     * @param sendByte 发送的数据</span><span class="hljs-comment">     */</span>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">send</span>(<span class="hljs-params">buffer: Uint8Array</span>)</span>&#123;        <span class="hljs-keyword">this</span>._socket.send(buffer);    &#125;    <span class="hljs-comment">/**接收数据*/</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">onReceive</span>(<span class="hljs-params">e</span>)</span>&#123;        <span class="hljs-comment">//读取socket数据</span>        <span class="hljs-keyword">var</span> <span class="hljs-built_in">byte</span> = <span class="hljs-keyword">new</span> Uint8Array(e)        <span class="hljs-keyword">var</span> data = sanguo.LoginReq.decode(<span class="hljs-built_in">byte</span>);        console.log(<span class="hljs-string">&quot;接收到服务端数据&quot;</span>, data.uid)    &#125;        <span class="hljs-comment">//与服务器连接关闭时触发</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">closeHandler</span>(<span class="hljs-params">e</span>)</span>&#123;        console.log(<span class="hljs-string">&quot;与服务器连接断开.&quot;</span>);    &#125;        <span class="hljs-comment">//与服务器通信错误时触发</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">errorHandler</span>(<span class="hljs-params">e</span>)</span>&#123;        console.log(<span class="hljs-string">&quot;与服务器通信错误.&quot;</span>);    &#125;</code></pre><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ws = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;nodejs-websocket&quot;</span>);<span class="hljs-keyword">var</span> protobufjs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;protobufjs&quot;</span>);<span class="hljs-comment">//使用login.js文件</span><span class="hljs-keyword">var</span> root = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./protobuf/protofile/login&quot;</span>);    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;开始创建websocket&quot;</span>);<span class="hljs-keyword">var</span> server = ws.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">conn</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;连接成功&quot;</span>);    conn.on(<span class="hljs-string">&quot;binary&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">inStream</span>) </span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;接收消息&quot;</span>);        <span class="hljs-keyword">var</span> data;        inStream.on(<span class="hljs-string">&quot;readable&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            data = inStream.read();        &#125;)        inStream.on(<span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Received &quot;</span> + data.length + <span class="hljs-string">&quot; bytes of binary data&quot;</span>);            <span class="hljs-comment">//使用login.js文件</span>            <span class="hljs-comment">//解析登录数据</span>            <span class="hljs-keyword">var</span> loginReqObj = root.sanguo.LoginReq.decode(data);            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请求登录的用户:&quot;</span>,loginReqObj.uid);            <span class="hljs-comment">//返回登录响应</span>            <span class="hljs-keyword">let</span> loginResObj = root.sanguo.LoginReq.create();            loginResObj.code = <span class="hljs-number">200</span>;            loginResObj.uid = <span class="hljs-number">7654321</span>;            <span class="hljs-keyword">var</span> buffer = root.sanguo.LoginReq.encode(loginResObj).finish();            conn.send(buffer);        &#125;)    &#125;)    conn.on(<span class="hljs-string">&quot;close&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">code, reason</span>) </span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;关闭连接&quot;</span>)    &#125;);    conn.on(<span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">code, reason</span>) </span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;异常关闭&quot;</span>)    &#125;);&#125;).listen(<span class="hljs-number">8001</span>)<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;开始创建websocket完毕&quot;</span>);</code></pre><p>执行 node app.js 即可启动，在命令行有输出日志；然后用打开客户端编译，在Chrome查看F12即可。</p>]]></content>
    
    
    <categories>
      
      <category>Nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nodejs</tag>
      
      <tag>websocket</tag>
      
      <tag>protobuf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NodeJS服务器学习笔记（二）</title>
    <link href="/2020/12/25/nodejs-note002/"/>
    <url>/2020/12/25/nodejs-note002/</url>
    
    <content type="html"><![CDATA[<p>这一页笔记几乎与node没有实际关系，只是需要学习服务端就可能需要用到。</p><a id="more"></a><h1 id="Mongodb-与-Mongoose-的使用"><a href="#Mongodb-与-Mongoose-的使用" class="headerlink" title="Mongodb 与 Mongoose 的使用"></a>Mongodb 与 Mongoose 的使用</h1><p>mongoDB是一个基于分布式文件存储、面向文档存储的开源数据库系统。</p><p>mongoose是mongoDB的一个对象模型工具，是基于node-mongodb-native开发的mongoDB的nodejs驱动，可以在异步的环境下执行。同时它也是针对mongoDB操作的一个对象模型库，封装了mongoDB对文档的一些增删改查等常用方法，让nodejs操作mongoDB数据库变得更加容易。它的作用就是，在程序代码中，定义数据库中的数据格式，然后取数据时通过它们，可以把数据库中的document映射成程序中的一个对象，这个对象有 .save、 .update 等一系列方法，和 .title、 .author 等一系列属性。在调用这些方法时，odm 会根据你调用时所用的条件，自动转换成相应的 mongodb shell 语句帮你发送出去。自然地，在程序中链式调用一个个的方法要比手写数据库操作语句具有更大的灵活性和便利性。</p><p>Ps：odm 是 <code>Object-Document Mapping</code>，对象文档映射。</p><h2 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>window传统的傻瓜式安装，地址如下：<br><a href="https://www.mongodb.com/download-center/community">MongoDB 预编译二进制包下载地址</a><br>假如已经在E盘安装了mangodb。</p><h3 id="创建-MangoDB-数据库目录"><a href="#创建-MangoDB-数据库目录" class="headerlink" title="创建 MangoDB 数据库目录"></a>创建 MangoDB 数据库目录</h3><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> e:<span class="hljs-variable">$</span> mkdir <span class="hljs-keyword">data</span> &amp;&amp; <span class="hljs-built_in">cd</span> <span class="hljs-keyword">data</span><span class="hljs-variable">$</span> mkdir mangoDB &amp;&amp; <span class="hljs-built_in">cd</span> mangoDB</code></pre><h3 id="运行-MangoDB-服务器"><a href="#运行-MangoDB-服务器" class="headerlink" title="运行 MangoDB 服务器"></a>运行 MangoDB 服务器</h3><pre><code class="hljs taggerscript">$ e:<span class="hljs-symbol">\m</span>angodb<span class="hljs-symbol">\b</span>in<span class="hljs-symbol">\m</span>angod --dbpath e:<span class="hljs-symbol">\d</span>ata<span class="hljs-symbol">\m</span>angoDB</code></pre><h3 id="连接-MangoDB"><a href="#连接-MangoDB" class="headerlink" title="连接 MangoDB"></a>连接 MangoDB</h3><pre><code class="hljs taggerscript">$ e:<span class="hljs-symbol">\m</span>ongodb<span class="hljs-symbol">\b</span>in<span class="hljs-symbol">\m</span>ango.exe</code></pre><h3 id="配置-MangoDB-服务"><a href="#配置-MangoDB-服务" class="headerlink" title="配置 MangoDB 服务"></a>配置 MangoDB 服务</h3><p>创建配置文件</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> e:\data\<span class="hljs-built_in">log</span></span></code></pre><p>创建一个配置文件位于 e:\mongodb\mongod.cfg，其中指定 systemLog.path 和 storage.dbPath。具体配置内容如下：</p><pre><code class="hljs less"><span class="hljs-attribute">systemLog</span>:    <span class="hljs-attribute">destination</span>: file    <span class="hljs-attribute">path</span>: <span class="hljs-attribute">e</span>:\data\log\mongod.log<span class="hljs-attribute">storage</span>:    <span class="hljs-attribute">dbPath</span>: <span class="hljs-attribute">e</span>:\data\db</code></pre><h3 id="安装-MangoDB-服务"><a href="#安装-MangoDB-服务" class="headerlink" title="安装 MangoDB 服务"></a>安装 MangoDB 服务</h3><pre><code class="hljs taggerscript">$ e:<span class="hljs-symbol">\m</span>ongodb<span class="hljs-symbol">\b</span>in<span class="hljs-symbol">\m</span>ongod.exe --config &quot;e:<span class="hljs-symbol">\m</span>ongodb<span class="hljs-symbol">\m</span>ongod.cfg&quot; --install</code></pre><h3 id="管理-MangoDB-服务"><a href="#管理-MangoDB-服务" class="headerlink" title="管理 MangoDB 服务"></a>管理 MangoDB 服务</h3><pre><code class="hljs awk">$ net start MangoDB <span class="hljs-regexp">//</span>启动$ net stop MangoDB <span class="hljs-regexp">//</span>关闭$ e:\mangodb\bin\mongod.exe --remove <span class="hljs-regexp">//</span>移除</code></pre><h2 id="Mongoose"><a href="#Mongoose" class="headerlink" title="Mongoose"></a>Mongoose</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><pre><code class="hljs cmake">$ cnpm <span class="hljs-keyword">install</span> mongoose</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 首先引入 mongoose 这个模块var mongoose = require(<span class="hljs-string">&#x27;mongoose&#x27;</span>);<span class="hljs-regexp">//</span> 然后连接对应的数据库：mongodb:<span class="hljs-regexp">//</span>localhost/test<span class="hljs-regexp">//</span> 其中，前面那个 mongodb 是 protocol scheme 的名称；localhost 是 mongod 所在的地址；<span class="hljs-regexp">//</span> 端口号省略则默认连接 <span class="hljs-number">27017</span>；test 是数据库的名称<span class="hljs-regexp">//</span> mongodb 中不需要建立数据库，当你需要连接的数据库不存在时，会自动创建一个出来。<span class="hljs-regexp">//</span> mongodb 的默认配置只接受来自本机的请求，内网都连不上。<span class="hljs-regexp">//</span> 当需要在内网中为其他机器提供 mongodb 服务时，或许可以了解了解 iptables 相关的东西。mongoose.connect(<span class="hljs-string">&#x27;mongodb://localhost/test&#x27;</span>);<span class="hljs-regexp">//</span>推荐在同一个 collection 中使用固定的数据形式。<span class="hljs-regexp">//</span>创建model时，它在数据库中的名字根据传给 mongoose.model 的第一个参数决定，mongoose 会将名词变为复数，例如cat会变成cats。var Cat = mongoose.model(<span class="hljs-string">&#x27;cat&#x27;</span>, &#123;  name: String,  friends: [String],  age: Number,&#125;);<span class="hljs-regexp">//</span> new 一个新对象，名叫 kitty<span class="hljs-regexp">//</span> 接着为 kitty 的属性们赋值var kitty = new Cat(&#123; name: <span class="hljs-string">&#x27;nini&#x27;</span>, friends: [<span class="hljs-string">&#x27;meimei&#x27;</span>, <span class="hljs-string">&#x27;zhuba&#x27;</span>]&#125;);kitty.age = <span class="hljs-number">2</span>;<span class="hljs-regexp">//</span> 调用 .save 方法后，mongoose 会去你的 mongodb 中的 test 数据库里，存入一条记录。kitty.save(<span class="hljs-keyword">function</span> (err) &#123;  <span class="hljs-keyword">if</span> (err) <span class="hljs-regexp">//</span> ...  console.log(<span class="hljs-string">&#x27;saveOver&#x27;</span>);&#125;);</code></pre><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>mango<span class="hljs-variable">$ </span>show dbs<span class="hljs-variable">$ </span><span class="hljs-keyword">use</span> test<span class="hljs-variable">$ </span>show collections<span class="hljs-variable">$ </span>db.cats.find()</code></pre>]]></content>
    
    
    <categories>
      
      <category>Nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nodejs</tag>
      
      <tag>MangoDB</tag>
      
      <tag>Mangoose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NodeJS服务器学习笔记（一）</title>
    <link href="/2020/12/25/nodejs-note001/"/>
    <url>/2020/12/25/nodejs-note001/</url>
    
    <content type="html"><![CDATA[<p>搭建一个简单的nodejs服务器。</p><a id="more"></a><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>nodejs环境：window下可以直接在官网下载安装。下载且安装完成后可以通过cmd命令行输入以下代码来确认安装的nodejs版本。</p><pre><code class="hljs crmsh">$ <span class="hljs-keyword">node</span> <span class="hljs-title">-v</span></code></pre><p>最新版的nodejs已经包括了npm，想要查看npm版本可以执行以下代码：</p><pre><code class="hljs ada">$ npm <span class="hljs-comment">--version</span></code></pre><p>部分情况下，使用npm安装其他库的时候会报网络错误，或者是下载缓慢，国内可以通过使用cnpm（淘宝镜像）来解决这种情况（使用的时候把npm替换为cnpm即可），cnpm安装命令：</p><pre><code class="hljs awk">$ npm install -g cnpm --registry=https:<span class="hljs-regexp">//</span>registry.npm.taobao.org  <span class="hljs-regexp">//</span>使用淘宝镜像</code></pre><p>如果需要不同版本的nodejs，可以通过安装nvm来控制nodejs的版本。nvm for windows是一个命令行工具，在控制台输入nvm,就可以看到它的命令用法。基本命令有：</p><pre><code class="hljs angelscript">$ nvm list　　<span class="hljs-comment">//查看目前已经安装的版本</span>$ nvm install <span class="hljs-number">10.15</span><span class="hljs-number">.0</span> <span class="hljs-comment">//安装指定的版本的nodejs</span>$ nvm use <span class="hljs-number">10.15</span><span class="hljs-number">.0</span> <span class="hljs-comment">//使用指定版本的nodejs</span></code></pre><ul><li><a href="https://nodejs.org/zh-cn/">nodejs官网</a></li><li><a href="https://github.com/coreybutler/nvm-windows/releases">nvm-windows下载地址</a></li></ul><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><p>搭建一个简单的nodejs服务器，这里使用express框架搭建。</p><pre><code class="hljs maxima">$ <span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">demo</span> &amp;&amp; cd <span class="hljs-built_in">demo</span> //创建<span class="hljs-built_in">demo</span>目录并进入$ cnpm install <span class="hljs-built_in">express</span> //安装<span class="hljs-built_in">express</span></code></pre><p>在demo文件夹下新建app.js文件，代码如下：</p><pre><code class="hljs javascript"><span class="hljs-comment">// app.js</span><span class="hljs-comment">// 引入 `express` 模块，并将它赋予给`express` </span><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<span class="hljs-comment">// 调用 express 实例</span><span class="hljs-keyword">var</span> app = express();app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;res.send(<span class="hljs-string">&#x27;hello node&#x27;</span>);&#125;);<span class="hljs-comment">// 监听本地的 3000 端口</span>app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;app is listening at port 3000&#x27;</span>);&#125;);</code></pre><p>在cmd执行启动命令：</p><pre><code class="hljs crmsh">$ <span class="hljs-keyword">node</span> <span class="hljs-title">app</span>.js</code></pre><p>然后在浏览器访问：“<a href="http://127.0.0.1:3000/%E2%80%9D">http://127.0.0.1:3000/”</a> 或者 “<a href="http://localhost:3000/%E2%80%9D%EF%BC%8C%E4%BC%9A%E8%BE%93%E5%87%BAhello">http://localhost:3000/”，会输出hello</a> node。至此一个简单的nodejs服务器完成了。</p>]]></content>
    
    
    <categories>
      
      <category>Nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(Python)通过文件的md5值来确认文件是否修改</title>
    <link href="/2020/12/17/python-note010/"/>
    <url>/2020/12/17/python-note010/</url>
    
    <content type="html"><![CDATA[<p>通过文件的md5值来确认文件是否修改。</p><a id="more"></a><p>本例子采用python3.8.0版本</p><p>通过文件的md5值来确认文件是否修改，可以做到很多事情。类似版本间的升级这种情况，可以根据判断同个文件的md5值来判断文件是否已经发生改变，配合字典也可以索引出新增的文件。找出不同版本之间有修改的图片、文件等，补丁热更等。</p><p>示例：以一份excel配置为基础库文件，存储对应文件的路径及其md5值（本脚本忽略这一步，默认已拥有1.0版本对应的md5表）。</p><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-comment">#python3.8.0</span><span class="hljs-keyword">import</span> os<span class="hljs-keyword">from</span> os.path <span class="hljs-keyword">import</span> join<span class="hljs-keyword">import</span> re<span class="hljs-keyword">import</span> xlsxwriter<span class="hljs-keyword">import</span> hashlib<span class="hljs-keyword">import</span> shutil<span class="hljs-keyword">import</span> xlrd<span class="hljs-comment"># 需要匹配的上一个版本</span>last_version = <span class="hljs-string">&quot;1.0&quot;</span><span class="hljs-comment"># 新版本</span>new_version = <span class="hljs-string">&quot;1.1&quot;</span><span class="hljs-comment"># 旧md5</span>last_version_md5_path = <span class="hljs-string">&#x27;images_md5_&#x27;</span> + last_version + <span class="hljs-string">&#x27;.xlsx&#x27;</span> <span class="hljs-comment"># 新版本项目文件路径前缀</span>new_version_path_prefix = <span class="hljs-string">&#x27;E:/python_tools/&#x27;</span> + new_version<span class="hljs-comment"># 如果有更新或者修改的文件需要拷贝出来放在某个路径</span>copy_news_path = <span class="hljs-string">&#x27;E:/python_tools/newImages&#x27;</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span>():</span>    <span class="hljs-keyword">pass</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_files</span>(<span class="hljs-params"><span class="hljs-built_in">dir</span></span>):</span>    <span class="hljs-comment"># 打开表格</span>    excel_path = os.path.join(rootpath, last_version_md5_path)    workbook = xlrd.open_workbook(excel_path)     <span class="hljs-comment"># 根据sheet索引或者名称获取sheet内容</span>    sheet_src = workbook.sheet_by_name(<span class="hljs-string">&#x27;md5&#x27;</span>)    <span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os.walk(<span class="hljs-built_in">dir</span>):        <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> files:            <span class="hljs-comment"># 非jpg或png的过滤</span>            isImg = filename.find(<span class="hljs-string">&quot;.png&quot;</span>) &gt; <span class="hljs-number">-1</span> <span class="hljs-keyword">or</span> filename.find(<span class="hljs-string">&quot;.jpg&quot;</span>) &gt; <span class="hljs-number">-1</span>            <span class="hljs-keyword">if</span> isImg == <span class="hljs-literal">False</span>:                <span class="hljs-keyword">continue</span>            <span class="hljs-comment"># print(filename)</span>            <span class="hljs-comment">#进入文件开始执行脚本</span>            file_url = join(root, filename)            f = <span class="hljs-built_in">open</span>(file_url, <span class="hljs-string">&#x27;rb&#x27;</span>)            <span class="hljs-comment"># md.update(f.read())</span>            md = hashlib.md5(f.read())            val = md.hexdigest()            excelLineKey = file_url.replace(new_version_path_prefix, <span class="hljs-string">&quot;&quot;</span>)            <span class="hljs-built_in">setattr</span>(p, excelLineKey, val) <span class="hljs-comment"># 更新md5</span>            isFindSame = <span class="hljs-literal">False</span>            isFileUrlSame = <span class="hljs-literal">False</span>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(sheet_src.nrows):                excel_key = sheet_src.cell(i, <span class="hljs-number">0</span>).value <span class="hljs-comment">#第一列每一行的数据</span>                excel_val = sheet_src.cell(i, <span class="hljs-number">1</span>).value <span class="hljs-comment">#第二列每一行的数据</span>                <span class="hljs-comment"># print(excel_key)</span>                <span class="hljs-comment"># print(excelLineKey)</span>                <span class="hljs-keyword">if</span> excel_key == excelLineKey: <span class="hljs-comment">#路径都不同了就跳过</span>                    isFileUrlSame = <span class="hljs-literal">True</span>                 <span class="hljs-keyword">else</span>:                    <span class="hljs-keyword">continue</span>                <span class="hljs-keyword">if</span> val == excel_val:                    isFindSame = <span class="hljs-literal">True</span> <span class="hljs-comment">#md5相同的说明没改变</span>                    <span class="hljs-keyword">break</span>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> isFindSame:                <span class="hljs-comment"># 把这个图片拷贝到新文件夹</span>                <span class="hljs-comment"># copy_target_path = file_url.replace(new_version_path_prefix.replace(&quot;/&quot;, &quot;\\&quot;), newImagsPath.replace(&quot;/&quot;, &quot;\\&quot;))</span>                copy_target_path = file_url.replace(new_version_path_prefix, newImagsPath)                copy_target_dir = copy_target_path.replace(filename, <span class="hljs-string">&quot;&quot;</span>)                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(copy_target_dir):                    os.makedirs(copy_target_dir)                <span class="hljs-keyword">if</span> os.path.exists(file_url):                    shutil.copyfile(file_url, copy_target_path)            <span class="hljs-keyword">if</span> isFileUrlSame: <span class="hljs-comment"># 说明找到了这个文件，不是新增的</span>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> isFindSame: <span class="hljs-comment"># md5不一致，有修改</span>                    <span class="hljs-built_in">setattr</span>(c, excelLineKey, <span class="hljs-literal">True</span>)            <span class="hljs-keyword">else</span>: <span class="hljs-comment">#没找到，说明是新增</span>                <span class="hljs-built_in">setattr</span>(c, excelLineKey, <span class="hljs-literal">False</span>)            f.close()    <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:      print(<span class="hljs-string">&quot;verUpdateCheck start&quot;</span>)    rootpath = os.getcwd()    <span class="hljs-comment"># 看有没有日志目录，没有则创建</span>    logDir = os.path.join(rootpath, <span class="hljs-string">&#x27;resource_update_log&#x27;</span>)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(logDir):        os.makedirs(logDir)    <span class="hljs-comment"># 看有没有资源目录，没有则创建</span>    newImagsPath = os.path.join(copy_news_path, new_version)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(newImagsPath):        os.makedirs(newImagsPath)    p = Point()    c = Point()    read_files(new_version_resource_path)    <span class="hljs-comment"># 路径拼接 创建新的md5文件</span>    path = os.path.join(rootpath, <span class="hljs-string">&#x27;images_md5_&#x27;</span> + new_version + <span class="hljs-string">&#x27;.xlsx&#x27;</span>)    <span class="hljs-comment"># 存在说明已经创建过</span>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(path):        <span class="hljs-comment"># 创建表格</span>        newxlsx = xlsxwriter.Workbook(path)         <span class="hljs-comment"># 创建分页</span>        newsheet = newxlsx.add_worksheet(<span class="hljs-string">&quot;md5&quot;</span>)        <span class="hljs-comment"># 导入excel表</span>        index = <span class="hljs-number">0</span>        <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> p.__dict__.items():            newsheet.write(index, <span class="hljs-number">0</span>, k) <span class="hljs-comment">#行，列，数据</span>            newsheet.write(index, <span class="hljs-number">1</span>, v) <span class="hljs-comment">#行，列，数据</span>            index = index + <span class="hljs-number">1</span>        newxlsx.close()    <span class="hljs-comment"># 把新增及有修改的打印到文本</span>    resourceTxt = os.path.join(rootpath, <span class="hljs-string">&quot;resource_update_log&quot;</span>, <span class="hljs-string">&quot;resoure_update_&quot;</span> + new_version + <span class="hljs-string">&quot;.txt&quot;</span>)    fout = <span class="hljs-built_in">open</span>(resourceTxt, <span class="hljs-string">&#x27;w&#x27;</span>)    <span class="hljs-comment"># 这里偷懒了</span>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> c.__dict__.items():        <span class="hljs-keyword">if</span> v:            fout.write(<span class="hljs-string">&#x27;\n&#x27;</span>.join([<span class="hljs-string">&#x27;%s 图片地址：%s&#x27;</span> % (<span class="hljs-built_in">str</span>(v).replace(<span class="hljs-string">&quot;True&quot;</span>, <span class="hljs-string">&quot;有修改&quot;</span>), k)]))            fout.write(<span class="hljs-string">&#x27;\n&#x27;</span>)    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> c.__dict__.items():        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> v:            fout.write(<span class="hljs-string">&#x27;\n&#x27;</span>.join([<span class="hljs-string">&#x27;%s 图片地址：%s&#x27;</span> % (<span class="hljs-built_in">str</span>(v).replace(<span class="hljs-string">&quot;False&quot;</span>, <span class="hljs-string">&quot;新增的&quot;</span>), k)]))            fout.write(<span class="hljs-string">&#x27;\n&#x27;</span>)    fout.close()    print(<span class="hljs-string">&quot;verUpdateCheck end&quot;</span>)</code></pre>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(Python)把中文覆盖回原导出文件</title>
    <link href="/2020/12/17/python-note009/"/>
    <url>/2020/12/17/python-note009/</url>
    
    <content type="html"><![CDATA[<p>把中文覆盖回原导出文件。</p><a id="more"></a><p>本例子采用python3.8.0版本</p><p>与上一篇对应，一篇导出一篇导入。</p><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">import</span> re<span class="hljs-keyword">import</span> os<span class="hljs-keyword">from</span> os.path <span class="hljs-keyword">import</span> join<span class="hljs-keyword">import</span> xlrd<span class="hljs-keyword">import</span> xlsxwriter<span class="hljs-comment"># 过滤掉行数较多（超过200行）且不含中文的配置</span>filtersList = [<span class="hljs-string">&quot;a.json&quot;</span>, <span class="hljs-string">&quot;b.json&quot;</span>, <span class="hljs-string">&quot;c.json&quot;</span>, <span class="hljs-string">&quot;d.json&quot;</span>, <span class="hljs-string">&quot;e.json&quot;</span>]DATA_PATH = <span class="hljs-string">&quot;D:/client/1.0/DATA&quot;</span>pattern1 = <span class="hljs-string">r&#x27;(&quot;|\&#x27;|`)(.*?)(?&lt;!\\)\1&#x27;</span>  <span class="hljs-comment">#匹配了转义</span>pattern2 = <span class="hljs-string">r&#x27;(.*)([\u4e00-\u9fa5]+)\1&#x27;</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">replaceToFile</span>(<span class="hljs-params">lines, file_path, sheet_src</span>):</span>    fout = <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;w&#x27;</span>, encoding = <span class="hljs-string">&quot;UTF-8&quot;</span>)    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:        item = <span class="hljs-string">&quot;unknown string&quot;</span>        matches = re.findall(pattern1, line)        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> matches:            item = <span class="hljs-built_in">str</span>(item[<span class="hljs-number">1</span>])            checkResult = re.findall(pattern2, item)            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> checkResult:                <span class="hljs-keyword">continue</span>;            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(sheet_src.nrows):                val = sheet_src.cell(i, <span class="hljs-number">0</span>).value <span class="hljs-comment">#第一列每一行的数据</span>                replace_val = sheet_src.cell(i, <span class="hljs-number">1</span>).value <span class="hljs-comment">#第二列每一行的数据</span>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> replace_val:                    <span class="hljs-keyword">continue</span>                <span class="hljs-keyword">if</span> item == val:                    line = line.replace(item, replace_val)                    <span class="hljs-keyword">break</span>        fout.write(line)    fout.close()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forEachFile</span>(<span class="hljs-params">excel_path, file_path</span>):</span>    <span class="hljs-comment"># 打开表格</span>    workbook = xlrd.open_workbook(excel_path)     <span class="hljs-comment"># 根据sheet索引或者名称获取sheet内容</span>    sheet_src = workbook.sheet_by_name(<span class="hljs-string">&#x27;lib&#x27;</span>)    <span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os.walk(file_path):        <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> files:            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;.json&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> filename:                <span class="hljs-keyword">continue</span>            print(filename)            <span class="hljs-keyword">if</span> filename <span class="hljs-keyword">in</span> filtersList:                <span class="hljs-keyword">continue</span>            file_url = join(root, filename)            fin = <span class="hljs-built_in">open</span>(file_url, <span class="hljs-string">&#x27;r&#x27;</span>, encoding = <span class="hljs-string">&quot;UTF-8&quot;</span>)            lines = fin.readlines()            fin.close()            replaceToFile(lines, file_url, sheet_src)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:      print(<span class="hljs-string">&quot;translateToDATA start&quot;</span>)    rootpath = os.getcwd()    excel_path = os.path.join(rootpath, <span class="hljs-string">&#x27;language_data_lib.xls&#x27;</span>)     file_path = os.path.join(rootpath, DATA_PATH)     forEachFile(excel_path, file_path)    print(<span class="hljs-string">&quot;translateToDATA start&quot;</span>)</code></pre>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(Python)导出中文，且排除已经导出过的记录</title>
    <link href="/2020/12/17/python-note008/"/>
    <url>/2020/12/17/python-note008/</url>
    
    <content type="html"><![CDATA[<p>导出中文，且排除已经导出过的记录到excel表格中。</p><a id="more"></a><p>本例子采用python3.8.0版本</p><p>之前有类似的，这部分只是稍作完善。</p><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-comment">#python3</span><span class="hljs-keyword">import</span> os<span class="hljs-keyword">from</span> os.path <span class="hljs-keyword">import</span> join<span class="hljs-keyword">import</span> re<span class="hljs-keyword">import</span> xlrd<span class="hljs-keyword">import</span> xlwt<span class="hljs-keyword">import</span> xlsxwriter<span class="hljs-keyword">from</span> xlutils.copy <span class="hljs-keyword">import</span> copy   <span class="hljs-comment"># 过滤掉行数较多且不含中文的部分json配置</span>filtersList = [<span class="hljs-string">&quot;a.json&quot;</span>, <span class="hljs-string">&quot;b.json&quot;</span>, <span class="hljs-string">&quot;c.json&quot;</span>, <span class="hljs-string">&quot;d.json&quot;</span>, <span class="hljs-string">&quot;e.json&quot;</span>]DATA_PATH = <span class="hljs-string">&quot;D:/client/1.0/DATA&quot;</span>dataArr = []pattern1 = <span class="hljs-string">r&#x27;(&quot;|\&#x27;|`)(.*?)(?&lt;!\\)\1&#x27;</span>  <span class="hljs-comment">#匹配了转义</span>pattern2 = <span class="hljs-string">r&#x27;(.*)([\u4e00-\u9fa5]+)\1&#x27;</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span>():</span>    <span class="hljs-keyword">pass</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_line</span>(<span class="hljs-params">line</span>):</span>    matches = re.findall(pattern1, line)    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> matches:        item = <span class="hljs-built_in">str</span>(item[<span class="hljs-number">1</span>])        checkResult = re.findall(pattern2, item)        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> checkResult:            <span class="hljs-keyword">continue</span>        <span class="hljs-built_in">setattr</span>(p, item, <span class="hljs-number">1</span>)        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exportChinese</span>(<span class="hljs-params">filePath</span>):</span>    <span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os.walk(filePath):        <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> files:            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;.json&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> filename:                <span class="hljs-keyword">continue</span>            <span class="hljs-comment"># print(filename)</span>            file_url = join(root, filename)            f = <span class="hljs-built_in">open</span>(file_url, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>)            line = f.readline()            <span class="hljs-keyword">while</span> line:                isbool = read_line(line)                <span class="hljs-keyword">if</span> filename <span class="hljs-keyword">in</span> filtersList:                    <span class="hljs-keyword">if</span> isbool:                        print(<span class="hljs-string">&quot;error to json has in filters：&quot;</span> + filename)                line = f.readline()            f.close()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">checkAndWriteExcel</span>():</span>    <span class="hljs-comment"># 没有该文件就创建</span>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(lib_path):        <span class="hljs-comment"># 路径拼接</span>        path = os.path.join(rootpath,<span class="hljs-string">&#x27;language_data_lib.xls&#x27;</span>)        <span class="hljs-comment"># 创建表格</span>        newxlsx = xlsxwriter.Workbook(path)         <span class="hljs-comment"># 创建分页</span>        newsheet = newxlsx.add_worksheet(<span class="hljs-string">&quot;lib&quot;</span>)        <span class="hljs-comment"># 创建完要记得关闭</span>        newxlsx.close()    <span class="hljs-comment"># 打开表格-读取</span>    readBook = xlrd.open_workbook(lib_path)     <span class="hljs-comment"># 根据sheet索引或者名称获取sheet内容</span>    read_sheet = readBook.sheet_by_name(<span class="hljs-string">&#x27;lib&#x27;</span>)    <span class="hljs-comment"># 最大行数</span>    lineMax = read_sheet.nrows     <span class="hljs-comment"># 记录行数    </span>    index = lineMax + <span class="hljs-number">0</span>     <span class="hljs-comment"># 对比原excel表</span>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> p.__dict__.items():        isHave = <span class="hljs-literal">False</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(read_sheet.nrows):            copy_first = read_sheet.cell(i, <span class="hljs-number">0</span>).value <span class="hljs-comment">#第一列每一行的数据</span>            <span class="hljs-keyword">if</span> copy_first == k:                isHave = <span class="hljs-literal">True</span>                <span class="hljs-keyword">break</span>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> isHave:            dataArr.append(k)        <span class="hljs-comment"># 打开表格-写入</span>    writeBook = copy(readBook)              <span class="hljs-comment"># 根据sheet索引或者名称获取sheet内容</span>    write_sheet = writeBook.get_sheet(<span class="hljs-number">0</span>)    <span class="hljs-comment"># 写入excel表</span>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> dataArr:        write_sheet.write(index, <span class="hljs-number">0</span>, item) <span class="hljs-comment">#行，列，数据</span>        index = index + <span class="hljs-number">1</span>    writeBook.save(<span class="hljs-string">&#x27;language_data_lib.xls&#x27;</span>)    <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:      print(<span class="hljs-string">&quot;exportFromDATA start&quot;</span>)    rootpath = os.getcwd()    file_path = os.path.join(rootpath, DATA_PATH)     lib_path = os.path.join(rootpath,<span class="hljs-string">&#x27;language_data_lib.xls&#x27;</span>)     p = Point()    <span class="hljs-comment"># 提取中文</span>    exportChinese(file_path)    <span class="hljs-comment"># 写入excel</span>    checkAndWriteExcel()    print(<span class="hljs-string">&quot;exportFromDATA end&quot;</span>)</code></pre>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(Python)提取对应文件里的图片并复制路径</title>
    <link href="/2020/12/05/python-note007/"/>
    <url>/2020/12/05/python-note007/</url>
    
    <content type="html"><![CDATA[<p>提取对应文件里的图片并复制路径。</p><a id="more"></a><p>本例子采用python3.8.0版本</p><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">import</span> re<span class="hljs-keyword">import</span> os<span class="hljs-keyword">from</span> os.path <span class="hljs-keyword">import</span> join<span class="hljs-keyword">import</span> xlrd<span class="hljs-keyword">import</span> shutilrootpath = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">extrachImage</span>(<span class="hljs-params">filePath</span>):</span>    old_src_url = <span class="hljs-string">&quot;assets/&quot;</span> + filePath    new_src_url = <span class="hljs-string">&quot;copyFiles_UI/&quot;</span> + filePath    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(old_src_url):        <span class="hljs-keyword">return</span>    pattern = <span class="hljs-string">r&#x27;.*\/&#x27;</span>    matches = re.findall(pattern, new_src_url)    dir_path = matches[<span class="hljs-number">0</span>]    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(dir_path):        print(<span class="hljs-string">&quot;mkdir :&quot;</span> + dir_path)        os.makedirs(dir_path)    <span class="hljs-keyword">if</span> os.path.exists(old_src_url):        shutil.copyfile(old_src_url, new_src_url)<span class="hljs-comment"># 遍历excel表格</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forEachExcel</span>(<span class="hljs-params">excelPath</span>):</span>    <span class="hljs-comment"># 打开表格</span>    workbook = xlrd.open_workbook(excelPath)     <span class="hljs-comment"># 根据sheet索引或者名称获取sheet内容</span>    sheet_src = workbook.sheet_by_name(<span class="hljs-string">&#x27;cht&#x27;</span>)    <span class="hljs-comment"># 遍历走起</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(sheet_src.nrows):        img_path = sheet_src.cell(i, <span class="hljs-number">0</span>).value <span class="hljs-comment"># 第一列每一行的数据</span>        boolVal = sheet_src.cell(i, <span class="hljs-number">1</span>).value <span class="hljs-comment"># 第二列</span>        pattern = <span class="hljs-string">r&#x27;[\u4e00-\u9fa5]&#x27;</span>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> boolVal:            <span class="hljs-keyword">continue</span>        matches = re.findall(pattern, <span class="hljs-built_in">str</span>(boolVal))        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(matches) == <span class="hljs-number">0</span>:            <span class="hljs-keyword">continue</span>        <span class="hljs-comment"># 非jpg或png的过滤</span>        isImg = img_path.find(<span class="hljs-string">&quot;.png&quot;</span>) &gt; <span class="hljs-number">-1</span> <span class="hljs-keyword">or</span> img_path.find(<span class="hljs-string">&quot;.jpg&quot;</span>) &gt; <span class="hljs-number">-1</span>        <span class="hljs-keyword">if</span> isImg == <span class="hljs-literal">False</span>:            <span class="hljs-keyword">continue</span>        extrachImage(img_path)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    target_folder = os.path.exists(<span class="hljs-string">&quot;copyFiles_UI&quot;</span>)    <span class="hljs-keyword">if</span> target_folder == <span class="hljs-literal">False</span>:        root = os.getcwd()        os.mkdir(root + <span class="hljs-string">&quot;\\copyFiles_UI&quot;</span>)        excel_path = <span class="hljs-string">&quot;20201124.xls&quot;</span>        forEachExcel(excel_path)</code></pre>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript笔记(一)</title>
    <link href="/2020/12/05/javascript-learn-test05/"/>
    <url>/2020/12/05/javascript-learn-test05/</url>
    
    <content type="html"><![CDATA[<p>worker的使用。</p><a id="more"></a><h2 id="worket简单介绍"><a href="#worket简单介绍" class="headerlink" title="worket简单介绍"></a>worket简单介绍</h2><p>JavaScript 语言采用的是单线程模型，也就是说，所有任务只能在一个线程上完成，一次只能做一件事。前面的任务没做完，后面的任务只能等着。而Web Worker 的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。</p><p>好处：一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。</p><h2 id="worker简单使用"><a href="#worker简单使用" class="headerlink" title="worker简单使用"></a>worker简单使用</h2><p>注意：</p><ol><li>同源限制，分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源</li><li>Worker无法访问DOM对象，例如document、window等；但可以访问navigator、location对象</li><li>主线程与子线程的通信方式，必须通过消息联系，而不能通过上下文环境控制</li><li>一些方法脚本的限制，Worker无法使用alert()和confim()方法</li><li>文件限制，Worker脚本文件必须来源于网络，而不能是本地</li><li>Worker 比较耗费资源，不应该过度使用，而且一旦使用完毕，就应该关闭</li></ol><pre><code class="hljs lasso"><span class="hljs-comment">//main.js</span><span class="hljs-keyword">let</span> worker = <span class="hljs-literal">new</span> worker() <span class="hljs-comment">//网络脚本文件，注意：Worker不能读取本地文件</span><span class="hljs-keyword">let</span> <span class="hljs-built_in">date</span> = <span class="hljs-literal">new</span> <span class="hljs-built_in">Date</span>();<span class="hljs-keyword">let</span> dateStr = <span class="hljs-built_in">date</span>.getFullYear();dateStr += <span class="hljs-string">&quot;-&quot;</span>;dateStr += <span class="hljs-built_in">date</span>.getMonth() + <span class="hljs-number">1</span> &gt; <span class="hljs-number">9</span> ? <span class="hljs-built_in">date</span>.getMonth() + <span class="hljs-number">1</span> : <span class="hljs-string">&quot;0&quot;</span> + (<span class="hljs-built_in">date</span>.getMonth() + <span class="hljs-number">1</span>);dateStr += <span class="hljs-string">&quot;-&quot;</span>;dateStr += <span class="hljs-built_in">date</span>.getDate() &gt; <span class="hljs-number">9</span> ? <span class="hljs-built_in">date</span>.getDate() : <span class="hljs-string">&quot;0&quot;</span> + <span class="hljs-built_in">date</span>.getDate();dateStr += <span class="hljs-string">&quot;:&quot;</span>;dateStr += <span class="hljs-built_in">date</span>.getHours() &gt; <span class="hljs-number">9</span> ? <span class="hljs-built_in">date</span>.getHours() : <span class="hljs-string">&quot;0&quot;</span> + <span class="hljs-built_in">date</span>.getHours();dateStr += <span class="hljs-string">&quot; &quot;</span>;dateStr += <span class="hljs-built_in">date</span>.getMinutes() &gt; <span class="hljs-number">9</span> ? <span class="hljs-built_in">date</span>.getMinutes() : <span class="hljs-string">&quot;0&quot;</span> + <span class="hljs-built_in">date</span>.getMinutes();dateStr += <span class="hljs-string">&quot;:&quot;</span>;dateStr += <span class="hljs-built_in">date</span>.getSeconds() &gt; <span class="hljs-number">9</span> ? <span class="hljs-built_in">date</span>.getSeconds() : <span class="hljs-string">&quot;0&quot;</span> + <span class="hljs-built_in">date</span>.getSeconds();worker.postMessage(<span class="hljs-string">&quot;begin&quot;</span>, dateStr) <span class="hljs-comment">//主线程向子线程发送消息</span>worker.onmessage = (e) =&gt; &#123; <span class="hljs-comment">//主线程监听子线程消息</span>    doSomething(e.<span class="hljs-built_in">data</span>);&#125;function doSomething(<span class="hljs-built_in">data</span>) &#123;    console.<span class="hljs-keyword">log</span>(<span class="hljs-string">&quot;onmessage by worker Data :&quot;</span>, <span class="hljs-built_in">data</span>)    worker.terminate(); <span class="hljs-comment">//主线程关闭worker</span>&#125;</code></pre><pre><code class="hljs javascript"><span class="hljs-comment">//如果需要加载外部脚本，使用 self.importScripts(jsfile) 方法</span><span class="hljs-comment">//work.js</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addCount</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;        count += <span class="hljs-number">1</span>;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">beginAddFunc</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">let</span> count = addCount();    <span class="hljs-keyword">let</span> timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;        <span class="hljs-keyword">let</span> val = count();        <span class="hljs-keyword">if</span> (val == <span class="hljs-number">10</span>) &#123;            self.postMessage(<span class="hljs-string">&quot;baginOver:&quot;</span> +  val); <span class="hljs-comment">//给主线程发送消息</span>            self.close(); <span class="hljs-comment">//关闭自身</span>            <span class="hljs-built_in">clearTimeout</span>(timer);        &#125;    &#125;, <span class="hljs-number">1000</span>);&#125;self.addEventListener(<span class="hljs-string">&quot;begin&quot;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123; <span class="hljs-comment">//监听主线程消息</span>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;beginEvent Data:&quot;</span>, e.data);    self.beginAddFunc(); &#125;, <span class="hljs-literal">false</span>)</code></pre><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>主线程可以通过worker的error事件来监听worker的错误。</p><pre><code class="hljs javascript">worker.onerror(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;    <span class="hljs-comment">//some code ...</span>&#125;)<span class="hljs-comment">//或者</span>worket.addEventListener(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;    <span class="hljs-comment">//some code ...</span>&#125;)</code></pre><h2 id="数据通信"><a href="#数据通信" class="headerlink" title="数据通信"></a>数据通信</h2><p>主线程与Worker之间通信时，通信内容一般是文本、对象，这种通信是拷贝关系，即Worker对通信内容的修改，不会影响到主进程。这里有个特殊的地方，假如主线程向Worker发送一个略大的二进制文件时，为了防止出现多个线程同时修改数据的问题，用了一种转移的方法，使得主线程可以把数据控制权转移给Worker（这个时候主线程已经无法再使用这些数据了，已经转移到Worker）。</p><pre><code class="hljs reasonml"><span class="hljs-comment">//Transferable Objects 格式</span>worker.post<span class="hljs-constructor">Message(<span class="hljs-params">arrayBuffer</span>, [<span class="hljs-params">arrayBuffer</span>])</span>;<span class="hljs-comment">//example</span>var ab = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ArrayBuffer(1)</span>;worker.post<span class="hljs-constructor">Message(<span class="hljs-params">ab</span>, [<span class="hljs-params">ab</span>])</span>;</code></pre><p>参考：</p><ul><li>Web Worker使用教程(<a href="http://www.ruanyifeng.com/blog/2018/07/web-worker.html">http://www.ruanyifeng.com/blog/2018/07/web-worker.html</a>)</li></ul>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>Javascript笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(Python)实现TextureMerger打包图集</title>
    <link href="/2020/11/27/python-note006/"/>
    <url>/2020/11/27/python-note006/</url>
    
    <content type="html"><![CDATA[<p>TextureMerger的用法详解，使用命令行实现TextureMerger打包图集。</p><a id="more"></a><p>本例子采用python2.7.16版本</p><p>TextureMerger的用法：<br>    - Texture Merger 的命令行，注意路径必须是绝对路径，路径好像不支持中文<br>    - 命令格式：-p [目录] […] -o [json输出路径] -e [文件筛选正则表达式]<br>    - example: TextureMerger -p e:/01main -o e:/01main.json -e /.*.(png)</p><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> zipfile<span class="hljs-keyword">from</span> zlib <span class="hljs-keyword">import</span> crc32<span class="hljs-keyword">import</span> json<span class="hljs-keyword">import</span> sys<span class="hljs-keyword">import</span> shutil<span class="hljs-keyword">import</span> os.path<span class="hljs-comment">#美术资源同级目录</span>URL_HEAD = <span class="hljs-string">&#x27;E:/Projects/rawres/ui/&#x27;</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tmmckeyactdir</span>(<span class="hljs-params">in_dir, out_dir</span>):</span>    in_dir = in_dir.replace(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)        e1 = in_dir.rfind(<span class="hljs-string">&#x27;/&#x27;</span>)    dirName = in_dir[e1 + <span class="hljs-number">1</span> : <span class="hljs-built_in">len</span>(in_dir)]    in_dir = URL_HEAD + in_dir    out_dir = URL_HEAD + out_dir           <span class="hljs-comment">#过滤部分不需要打包的文件夹</span>    flag = <span class="hljs-number">0</span>    <span class="hljs-built_in">print</span> in_dir    <span class="hljs-keyword">for</span> dPath, dirs, fs <span class="hljs-keyword">in</span> os.walk(in_dir):        <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> fs:            <span class="hljs-built_in">print</span> file     output_path = out_dir + <span class="hljs-string">&#x27;/&#x27;</span> + dirName + <span class="hljs-string">&#x27;.json&#x27;</span>    <span class="hljs-built_in">print</span> output_path       cmd = <span class="hljs-string">&#x27;TextureMerger -p &#123;in_dir&#125; -o &#123;output_path&#125; -e /(?!&#123;dirName&#125;\.png)\S[\w]+\S\.(png)&#x27;</span>.<span class="hljs-built_in">format</span>(in_dir = in_dir, output_path = output_path, dirName = dirName)    <span class="hljs-built_in">print</span> cmd    os.system(cmd)      <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:      <span class="hljs-built_in">print</span> <span class="hljs-string">&quot; start&quot;</span>    tmmckeyactdir(<span class="hljs-string">&#x27;dirSrc&#x27;</span>, <span class="hljs-string">&#x27;dirSrc&#x27;</span>)    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot; end&quot;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Egret</tag>
      
      <tag>Python</tag>
      
      <tag>脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(Python)利用Python脚本分割json图集</title>
    <link href="/2020/11/27/python-note005/"/>
    <url>/2020/11/27/python-note005/</url>
    
    <content type="html"><![CDATA[<p>利用Python脚本分割json图集，例如：egret的texturemerger工具打包的图集。</p><a id="more"></a><p>本例子采用python2.7.16版本</p><pre><code class="hljs processing"># -*- coding: utf<span class="hljs-number">-8</span> -*-#!python#利用Python脚本分割json图集<span class="hljs-keyword">import</span> re<span class="hljs-keyword">import</span> json<span class="hljs-keyword">import</span> os, sysfrom PIL <span class="hljs-keyword">import</span> Image#crop函数带的参数为（起始点的横坐标，起始点的纵坐标，宽度，高度）#paste函数的参数为​​（需要修改的图片，粘贴的起始点的横坐标，粘贴的起始点的纵坐标）out_path = <span class="hljs-string">&#x27;D:/Egret/jsonSplit/images/&#x27;</span>_json_filename = <span class="hljs-string">&#x27;D:/Egret/jsonSplit/61buyasuo.json&#x27;</span>_png_filename = <span class="hljs-string">&#x27;D:/Egret/jsonSplit/61buyasuo.png&#x27;</span>def to_list(src_dict):    ret = []    <span class="hljs-keyword">if</span> src_dict.has_key(<span class="hljs-string">&#x27;x&#x27;</span>):        ret.<span class="hljs-built_in">append</span>(src_dict[<span class="hljs-string">&#x27;x&#x27;</span>])    <span class="hljs-keyword">if</span> src_dict.has_key(<span class="hljs-string">&#x27;y&#x27;</span>):        ret.<span class="hljs-built_in">append</span>(src_dict[<span class="hljs-string">&#x27;y&#x27;</span>])    <span class="hljs-keyword">if</span> src_dict.has_key(<span class="hljs-string">&#x27;w&#x27;</span>):        ret.<span class="hljs-built_in">append</span>(src_dict[<span class="hljs-string">&#x27;w&#x27;</span>])    <span class="hljs-keyword">if</span> src_dict.has_key(<span class="hljs-string">&#x27;h&#x27;</span>):        ret.<span class="hljs-built_in">append</span>(src_dict[<span class="hljs-string">&#x27;h&#x27;</span>])    <span class="hljs-keyword">return</span> retdef gen_png_from_json(json_filename, png_filename):    big_image = Image.<span class="hljs-built_in">open</span>(png_filename)    json_dict = json.loads(<span class="hljs-built_in">open</span>(json_filename, <span class="hljs-string">&#x27;r&#x27;</span>).read())    <span class="hljs-keyword">for</span> k, v in json_dict[<span class="hljs-string">&#x27;frames&#x27;</span>].items():        <span class="hljs-built_in">width</span> = <span class="hljs-built_in">int</span>(v[<span class="hljs-string">&#x27;w&#x27;</span>])        <span class="hljs-built_in">height</span> = <span class="hljs-built_in">int</span>(v[<span class="hljs-string">&#x27;h&#x27;</span>])        <span class="hljs-built_in">box</span> = (            <span class="hljs-built_in">int</span>(v[<span class="hljs-string">&#x27;x&#x27;</span>]),            <span class="hljs-built_in">int</span>(v[<span class="hljs-string">&#x27;y&#x27;</span>]),            <span class="hljs-built_in">int</span>(v[<span class="hljs-string">&#x27;x&#x27;</span>]) + <span class="hljs-built_in">width</span>,            <span class="hljs-built_in">int</span>(v[<span class="hljs-string">&#x27;y&#x27;</span>]) + <span class="hljs-built_in">height</span>,        )        sizelist = [v[<span class="hljs-string">&#x27;w&#x27;</span>], v[<span class="hljs-string">&#x27;h&#x27;</span>]]        rect_on_big = big_image.crop(<span class="hljs-built_in">box</span>)        result_image = Image.<span class="hljs-keyword">new</span>(<span class="hljs-string">&#x27;RGBA&#x27;</span>, sizelist, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))        result_box = (            (sizelist[<span class="hljs-number">0</span>] - <span class="hljs-built_in">width</span>) / <span class="hljs-number">2</span>,            (sizelist[<span class="hljs-number">1</span>] - <span class="hljs-built_in">height</span>) / <span class="hljs-number">2</span>,            (sizelist[<span class="hljs-number">0</span>] + <span class="hljs-built_in">width</span>) / <span class="hljs-number">2</span>,            (sizelist[<span class="hljs-number">1</span>] + <span class="hljs-built_in">height</span>) / <span class="hljs-number">2</span>        )        result_image.paste(rect_on_big, result_box, mask=<span class="hljs-number">0</span>)         #<span class="hljs-built_in">print</span> k        outfile = out_path + k + <span class="hljs-string">&#x27;.png&#x27;</span>        result_image.<span class="hljs-built_in">save</span>(outfile)        <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;generate ---&gt;&#x27;</span> + outfile<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    gen_png_from_json(_json_filename, _png_filename)</code></pre>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(Python)把两份配置相同的地方合并在一起</title>
    <link href="/2020/11/27/python-note004/"/>
    <url>/2020/11/27/python-note004/</url>
    
    <content type="html"><![CDATA[<p>把两份配置相同的地方合并在一起，以一份最新的为查询对象，去匹配另外一张excel表格。</p><a id="more"></a><p>本例子采用python3.8.0版本</p><pre><code class="hljs haxe"><span class="hljs-meta"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">import</span> re<span class="hljs-keyword">import</span> osfrom os.path <span class="hljs-keyword">import</span> join<span class="hljs-keyword">import</span> xlrd<span class="hljs-keyword">import</span> xlsxwriterdef mergeFunc(path, copy_path, result_path):<span class="hljs-type"></span><span class="hljs-type">    </span># 创建表格    <span class="hljs-keyword">new</span><span class="hljs-type">xlsx</span> = xlsxwriter.Workbook(result_path)     <span class="hljs-meta"># 创建分页</span>    <span class="hljs-keyword">new</span><span class="hljs-type">sheet</span> = <span class="hljs-keyword">new</span><span class="hljs-type">xlsx</span>.add_worksheet(<span class="hljs-string">&quot;src&quot;</span>)    <span class="hljs-meta"># 打开表格</span>    workbook = xlrd.open_workbook(path)     <span class="hljs-meta"># 根据sheet索引或者名称获取sheet内容</span>    sheet_src = workbook.sheet_by_name(<span class="hljs-string">&#x27;src&#x27;</span>)    workbook_copy = xlrd.open_workbook(copy_path)     sheet_src_copy = workbook_copy.sheet_by_name(<span class="hljs-string">&#x27;src&#x27;</span>)    index = <span class="hljs-number">0</span> <span class="hljs-meta"># 记录行数</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(sheet_src.nrows):<span class="hljs-type"></span><span class="hljs-type">        key </span>= sheet_src.cell(i, <span class="hljs-number">0</span>).value <span class="hljs-meta">#第一列每一行的数据</span>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(sheet_src_copy.nrows):<span class="hljs-type"></span><span class="hljs-type">            copy_key </span>= sheet_src_copy.cell(j, <span class="hljs-number">0</span>).value            <span class="hljs-meta">#print(copy_key)</span>            <span class="hljs-keyword">if</span> key == copy_key:<span class="hljs-type"></span><span class="hljs-type">                newsheet</span>.write(index, <span class="hljs-number">0</span>, key)                copy_val = sheet_src_copy.cell(j, <span class="hljs-number">1</span>).value <span class="hljs-meta">#第二列每一行的数据</span>                <span class="hljs-keyword">new</span><span class="hljs-type">sheet</span>.write(index, <span class="hljs-number">1</span>, copy_val)                index = index + <span class="hljs-number">1</span>    <span class="hljs-keyword">new</span><span class="hljs-type">xlsx</span>.close()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:  <span class="hljs-type"></span><span class="hljs-type">    rootpath </span>= os.getcwd()    <span class="hljs-meta"># 路径拼接</span>    path = os.path.join(rootpath,<span class="hljs-string">&#x27;language_src.xlsx&#x27;</span>)    copy_path = os.path.join(rootpath,<span class="hljs-string">&#x27;language_src_replace.xlsx&#x27;</span>)    result_path = os.path.join(rootpath, <span class="hljs-string">&#x27;merge_language_src.xlsx&#x27;</span>)    mergeFunc(path, copy_path, result_path)</code></pre>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(Python)对项目文件的注释进行去除</title>
    <link href="/2020/11/27/python-note003/"/>
    <url>/2020/11/27/python-note003/</url>
    
    <content type="html"><![CDATA[<p>对项目文件的注释进行去除。</p><a id="more"></a><p>本例子采用python3.8.0版本</p><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-comment">#对Js进行删除注释的操作</span><span class="hljs-keyword">import</span> re<span class="hljs-keyword">import</span> os<span class="hljs-keyword">from</span> os.path <span class="hljs-keyword">import</span> join<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">checkline</span>(<span class="hljs-params">line</span>):</span>    <span class="hljs-comment"># 匹配 //xxxxxx</span>    single = <span class="hljs-string">r&#x27;\/\/[/s/S]+&#x27;</span>    line = re.sub(single, <span class="hljs-string">&quot;&quot;</span>, line)    <span class="hljs-comment"># 匹配 /* || * || */ </span>    single = <span class="hljs-string">r&#x27;(\/\*|\*|\*\/)[/s/S]+&#x27;</span>    line = re.sub(multiple, <span class="hljs-string">&quot;&quot;</span>, line)    <span class="hljs-comment"># 匹配 console.log打印</span>    con = <span class="hljs-string">r&#x27;console\.log\(.*?\);*?&#x27;</span>    line = re.sub(con, <span class="hljs-string">&quot;&quot;</span>, line)    deb = <span class="hljs-string">r&#x27;debug\(.*?\);*?&#x27;</span>    line = re.sub(deb, <span class="hljs-string">&quot;&quot;</span>, line)           <span class="hljs-keyword">return</span> line<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inline</span>(<span class="hljs-params"><span class="hljs-built_in">dir</span></span>):</span>    <span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os.walk(<span class="hljs-built_in">dir</span>):        <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> files:            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;.ts&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> filename:                <span class="hljs-keyword">continue</span>            <span class="hljs-comment">#进入文件开始执行脚本</span>            file_url = join(root, filename)            fin = <span class="hljs-built_in">open</span>(file_url, <span class="hljs-string">&#x27;r&#x27;</span>, encoding = <span class="hljs-string">&quot;UTF-8&quot;</span>)            lines = fin.readlines()            fin.close()            fout = <span class="hljs-built_in">open</span>(file_url, <span class="hljs-string">&#x27;w&#x27;</span>, encoding = <span class="hljs-string">&quot;UTF-8&quot;</span>)            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:                line = checkline(line)                fout.write(line)            fout.close()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:      rootpath = os.getcwd()        print(<span class="hljs-string">&quot;simplify inline start&quot;</span>)    inline(<span class="hljs-string">&#x27;src&#x27;</span>)    print(<span class="hljs-string">&quot;simplify inline end&quot;</span>)</code></pre>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(Python)导出项目文件里的中文</title>
    <link href="/2020/11/24/python-note002/"/>
    <url>/2020/11/24/python-note002/</url>
    
    <content type="html"><![CDATA[<p>导出项目代码文件里的带中文字眼的字符串。</p><a id="more"></a><p>本例子采用python3.8.0版本</p><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">import</span> os<span class="hljs-keyword">from</span> os.path <span class="hljs-keyword">import</span> join<span class="hljs-keyword">import</span> re<span class="hljs-keyword">import</span> xlsxwriter<span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> cmp_to_keydataArr = []<span class="hljs-comment"># pattern1 = r&#x27;(&quot;|\&#x27;|`)(.*?[\u4e00-\u9fa5].*?)\1&#x27;</span><span class="hljs-comment"># 匹配规则 挺麻烦 只能折中了</span>pattern1 = <span class="hljs-string">r&#x27;(&quot;|\&#x27;|`)(.*?)(?&lt;!\\)\1&#x27;</span> pattern2 = <span class="hljs-string">r&#x27;(.*)([\u4e00-\u9fa5]+)\1&#x27;</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span>():</span>    <span class="hljs-keyword">pass</span><span class="hljs-comment">#排序</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sortFunc</span>(<span class="hljs-params">a, b</span>):</span>    <span class="hljs-keyword">return</span> b[<span class="hljs-string">&#x27;cv&#x27;</span>] - a[<span class="hljs-string">&#x27;cv&#x27;</span>]        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_line</span>(<span class="hljs-params">line</span>):</span>    matches = re.findall(pattern1, line)    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> matches:        item = item[<span class="hljs-number">1</span>]        item = <span class="hljs-built_in">str</span>(item)        checkResult = re.findall(pattern2, item)        <span class="hljs-keyword">if</span> checkResult:            <span class="hljs-comment">#print(item)</span>            item = <span class="hljs-string">&quot;$start &quot;</span> + item + <span class="hljs-string">&quot; $end&quot;</span>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(p, item):                num = <span class="hljs-built_in">getattr</span>(p, item)                <span class="hljs-built_in">setattr</span>(p, item, num+<span class="hljs-number">1</span>)            <span class="hljs-keyword">else</span>:                <span class="hljs-built_in">setattr</span>(p, item, <span class="hljs-number">1</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_file</span>(<span class="hljs-params"><span class="hljs-built_in">dir</span></span>):</span>    <span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os.walk(<span class="hljs-built_in">dir</span>):        <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> files:            print(filename)            <span class="hljs-comment">#如果不是.ts文件直接忽略</span>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;.ts&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> filename:                <span class="hljs-keyword">continue</span>            <span class="hljs-comment">#进入文件开始执行脚本</span>            file_url = join(root, filename)            f = <span class="hljs-built_in">open</span>(file_url, <span class="hljs-string">&#x27;r&#x27;</span>, encoding = <span class="hljs-string">&quot;UTF-8&quot;</span>)            line = f.readline()            <span class="hljs-keyword">while</span> line:                read_line(line)                line = f.readline()            f.close()    <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:      print(<span class="hljs-string">&quot;simplify start&quot;</span>)    rootpath = os.getcwd()    <span class="hljs-comment"># 路径拼接</span>    path = os.path.join(rootpath,<span class="hljs-string">&#x27;language_src.xlsx&#x27;</span>)    <span class="hljs-comment"># 创建表格</span>    newxlsx = xlsxwriter.Workbook(path)     <span class="hljs-comment"># 创建分页</span>    newsheet = newxlsx.add_worksheet(<span class="hljs-string">&quot;xml&quot;</span>)    <span class="hljs-comment">#初始化一个对象，用来记录资源频率</span>    p = Point()        read_file(<span class="hljs-string">&#x27;src&#x27;</span>)        fout = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;src_chinese.txt&quot;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)    <span class="hljs-comment">#为了排序                </span>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> p.__dict__.items():        dataArr.append(&#123;<span class="hljs-string">&#x27;ck&#x27;</span>:k, <span class="hljs-string">&#x27;cv&#x27;</span>:v&#125;)    dataArr.sort(key=cmp_to_key(sortFunc))    <span class="hljs-comment">#打印成文本    </span>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> dataArr:        fout.write(<span class="hljs-string">&#x27;\n&#x27;</span>.join([<span class="hljs-string">&#x27;使用次数：%d      文本：%s&#x27;</span> % (item[<span class="hljs-string">&#x27;cv&#x27;</span>], item[<span class="hljs-string">&#x27;ck&#x27;</span>].replace(<span class="hljs-string">&quot;$start &quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot; $end&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))]))        fout.write(<span class="hljs-string">&#x27;\n&#x27;</span>)    fout.close()        <span class="hljs-comment"># 导入excel表</span>    index = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> dataArr:        newsheet.write(index, <span class="hljs-number">0</span>, item[<span class="hljs-string">&quot;ck&quot;</span>].replace(<span class="hljs-string">&quot;$start &quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot; $end&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)) <span class="hljs-comment">#行，列，数据</span>        index = index + <span class="hljs-number">1</span>    newxlsx.close()        print(<span class="hljs-string">&quot;simplify end&quot;</span>)</code></pre>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(Python)对excel的简单处理</title>
    <link href="/2020/11/23/python-note001/"/>
    <url>/2020/11/23/python-note001/</url>
    
    <content type="html"><![CDATA[<p>对excel的简单处理。</p><a id="more"></a><p>本例子采用python3.8.0版本</p><pre><code class="hljs leaf"># -*- coding: utf-8 -*-import reimport osfrom os.path import joinimport xlrdif __name__ == &#x27;__main__&#x27;:      rootpath = os.getcwd()    # 路径拼接    path = os.path.join(rootpath,&#x27;language_src.xlsx&#x27;)    # 创建表格    workbook = xlrd.open_workbook(path)     # 获取所有sheet    <span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-variable">workbook</span>.<span class="hljs-variable">sheet_names</span>()</span></span>) # [u&#x27;sheet1&#x27;, u&#x27;sheet2&#x27;]    #获取sheet2    #sheet2_name= workbook.sheet_names()[1]    <span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-variable">sheet2_name</span>)</span></span>    # 根据sheet索引或者名称获取sheet内容    sheet_src = workbook.sheet_by_name(&#x27;src&#x27;)    <span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-variable">sheet_src</span>.<span class="hljs-variable">name</span>, <span class="hljs-variable">sheet_src</span>.<span class="hljs-variable">nrows</span>, <span class="hljs-variable">sheet_src</span>.<span class="hljs-variable">ncols</span>)</span></span>    for i in range(sheet_src.nrows):        <span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-variable">sheet_src</span>.<span class="hljs-variable">row_values</span>(<span class="hljs-variable">i</span>)</span></span>) //第一列的数据        <span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-variable">sheet_src</span>.<span class="hljs-variable">cell</span>(<span class="hljs-variable">i</span>, 0)</span></span>.value) //第一列每一行的数据</code></pre>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(Egret)堆栈溢出的情况处理</title>
    <link href="/2020/11/21/egret-note01/"/>
    <url>/2020/11/21/egret-note01/</url>
    
    <content type="html"><![CDATA[<p>Egret堆栈溢出提示：</p><pre><code class="hljs asciidoc">......FATAL ERROR: CALL<span class="hljs-emphasis">_AND_</span>RETRY<span class="hljs-emphasis">_0 Allocation failed process out of memory</span><span class="hljs-emphasis">......</span></code></pre><a id="more"></a><p><b>问题描述：</b>编译时内存溢出, 因为白鹭编译时使用的自带的32位nodejs, 可换自己安装的64位的nodejs<br><b>解决方法：</b><br>    1. 安装个64位的nodejs, 如果安装在D:\Program Files\nodejs<br>    2. 修改C:\Users\登录用户名\AppData\Roaming\npm\egret.cmd文件, 设置路径为我们安装的64位nodejs<br>    3. 使用自己安装在d盘的 D:\Program Files\nodejs目录下在的node.exe与D:\Program Files\nodejs\node_modules\npm文件夹替换掉C:\Program Files (x86)\Egret\EgretLauncher\resources\app\engine\win目录下面的node.exe与npm文件夹</p><p>文件截图：<img src="/img/egret_note01.png"></p><pre><code class="hljs less"><span class="hljs-variable">@SET</span> NODE64=<span class="hljs-attribute">D</span>:\nodejs<span class="hljs-variable">@IF</span> EXIST <span class="hljs-string">&quot;%~dp0node_modules\egret\EgretEngine&quot;</span> (  FOR /F <span class="hljs-string">&quot;usebackq delims=&quot;</span> %%a in (<span class="hljs-string">&quot;%~dp0node_modules\egret\EgretEngine&quot;</span>) do @(set EGRET=%%a)) ELSE (  set EGRET=%~dp0node_modules)<span class="hljs-variable">@IF</span> EXIST <span class="hljs-string">&quot;%NODE64%\node.exe&quot;</span> (  <span class="hljs-string">&quot;%NODE64%\node.exe&quot;</span> --no-deprecation --max-old-space-size=<span class="hljs-number">4096</span> <span class="hljs-string">&quot;%EGRET%\selector.js&quot;</span> %*) ELSE (  <span class="hljs-variable">@SETLOCAL</span>  <span class="hljs-variable">@SET</span> PATHEXT=%<span class="hljs-attribute">PATHEXT</span>:;.JS;=;%  node --no-deprecation --max-old-space-size=<span class="hljs-number">4096</span> <span class="hljs-string">&quot;%EGRET%\selector.js&quot;</span> %*)</code></pre>]]></content>
    
    
    <categories>
      
      <category>Egret</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Egret</tag>
      
      <tag>堆栈溢出</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript试题收录(四)</title>
    <link href="/2020/11/20/javascript-learn-test04/"/>
    <url>/2020/11/20/javascript-learn-test04/</url>
    
    <content type="html"><![CDATA[<p>setTimeout 与 Promise 执行的先后顺序。</p><a id="more"></a><h2 id=""><a href="#" class="headerlink" title=""></a></h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;</span><span class="javascript">        <span class="hljs-built_in">console</span>.log(i);</span>    &#125;<span class="javascript">    <span class="hljs-comment">//result：0 1 2 3 4</span></span><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;</span><span class="javascript">        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><span class="javascript">            <span class="hljs-built_in">console</span>.log(i);</span>        &#125;, i * 1000);    &#125;<span class="javascript">    <span class="hljs-comment">//result：5 5 5 5 5</span></span><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;</span><span class="javascript">        (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">i</span>) </span>&#123;</span><span class="javascript">            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><span class="javascript">                <span class="hljs-built_in">console</span>.log(i);</span>            &#125;, i * 1000);        &#125;)(i)    &#125;<span class="javascript">    <span class="hljs-comment">//result：0 1 2 3 4</span></span><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;</span><span class="javascript">        (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><span class="javascript">            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><span class="javascript">                <span class="hljs-built_in">console</span>.log(i);</span>            &#125;, i * 1000);        &#125;)()    &#125;<span class="javascript">    <span class="hljs-comment">//result：5 5 5 5 5</span></span><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;</span><span class="javascript">        <span class="hljs-built_in">setTimeout</span>((<span class="hljs-function">() =&gt;</span> &#123;</span><span class="javascript">            <span class="hljs-built_in">console</span>.log(i);</span>        &#125;)(), i * 1000);    &#125;<span class="javascript">    <span class="hljs-comment">//result：0 1 2 3 4</span></span><span class="javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)</span>    &#125;, 0);<span class="javascript">    <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">executor</span>(<span class="hljs-params">resolve</span>) </span>&#123;</span><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);</span><span class="javascript">        <span class="hljs-function"><span class="hljs-title">for</span>(<span class="hljs-params"> <span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">10000</span> ; i++ </span>)</span> &#123;</span>            i == 9999 &amp;&amp; resolve();        &#125;<span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);</span><span class="javascript">    &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>);</span>    &#125;);<span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>);</span><span class="javascript">    <span class="hljs-comment">//result：2 3 5 4 1</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>Javascript试题收录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript试题收录(三)</title>
    <link href="/2020/11/01/javascript-learn-test03/"/>
    <url>/2020/11/01/javascript-learn-test03/</url>
    
    <content type="html"><![CDATA[<p>如何更安全的获取链式对象属性。</p><a id="more"></a><h2 id="获取链式对象属性"><a href="#获取链式对象属性" class="headerlink" title="获取链式对象属性"></a>获取链式对象属性</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">        <span class="hljs-comment">//一个 safeGet 函数，可以安全的获取无限多层次的数据，一旦数据不存在不会报错，会返回 undefined</span></span><span class="javascript">        <span class="hljs-comment">//一般情况下只有需要检测未知的情况下才会调用try...catch...，毕竟它会消耗性能</span></span><span class="javascript">        <span class="hljs-keyword">const</span> safeGet = <span class="hljs-function">(<span class="hljs-params">o, path</span>) =&gt;</span> &#123;</span><span class="javascript">            <span class="hljs-keyword">try</span> &#123;</span><span class="javascript">                <span class="hljs-keyword">return</span> path.split(<span class="hljs-string">&#x27;.&#x27;</span>).reduce(<span class="hljs-function">(<span class="hljs-params">o, k</span>) =&gt;</span> o[k], o)</span><span class="javascript">            &#125; <span class="hljs-keyword">catch</span> (e) &#123;</span><span class="javascript">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">void</span> <span class="hljs-number">666</span></span>            &#125;        &#125;<span class="javascript">        <span class="hljs-keyword">var</span> data = &#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: &#123; <span class="hljs-attr">c</span>: <span class="hljs-string">&#x27;ScriptOJ&#x27;</span> &#125; &#125; &#125;</span><span class="javascript">        <span class="hljs-built_in">console</span>.log(safeGet(data, <span class="hljs-string">&#x27;a.b.c.d.e.f.g&#x27;</span>), safeGet(data, <span class="hljs-string">&#x27;a.b.c&#x27;</span>))</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>Javascript试题收录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript试题收录(二)</title>
    <link href="/2020/11/01/javascript-learn-test02/"/>
    <url>/2020/11/01/javascript-learn-test02/</url>
    
    <content type="html"><![CDATA[<p>settimeout 与 serInterval的区别。</p><a id="more"></a><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">let</span> timer1 = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;serInterval&quot;</span>);</span>    &#125;, 1000);<span class="javascript">    <span class="hljs-keyword">let</span> timer2 = <span class="hljs-function">() =&gt;</span> &#123;</span><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;setTimeout&quot;</span>);</span><span class="javascript">        <span class="hljs-built_in">setTimeout</span>(timer2, <span class="hljs-number">1000</span>);</span>    &#125;<span class="javascript">    <span class="hljs-built_in">setTimeout</span>(timer2, <span class="hljs-number">1000</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>setTimeout 和 serInterval 都是延迟执行，后面的时间是延迟加入执行队列的时间</p><p><b style="color: red;">setInterval 可能受网络波动等影响，后一个间歇调用可能在前一个间歇调用结束之前调用</b>，一般很少调用setInterval</p><p>想要间歇性地调用某个方法，可以使用setTimeout，在执行结束后再调用自身</p>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>Javascript试题收录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript试题收录(一)</title>
    <link href="/2020/11/01/javascript-learn-test01/"/>
    <url>/2020/11/01/javascript-learn-test01/</url>
    
    <content type="html"><![CDATA[<p>常见的JS排序方式。</p><a id="more"></a><h2 id="三种常见的排序方式"><a href="#三种常见的排序方式" class="headerlink" title="三种常见的排序方式"></a>三种常见的排序方式</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">        <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">100</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">21</span>, <span class="hljs-number">3</span>, <span class="hljs-number">22</span>, <span class="hljs-number">20</span>, <span class="hljs-number">5</span>, <span class="hljs-number">11</span>, <span class="hljs-number">9</span>, <span class="hljs-number">77</span>, <span class="hljs-number">99</span>, <span class="hljs-number">100</span>];</span><span class="javascript">        <span class="hljs-comment">// var arr = [100, 1, 5, 11, 55, 2, 3, 55, 1, 88, 44, 177, 873, 12, 66, 88, 33, 124, 7, 21, 3, 22, 2, 33, 68, 60, 7, 0, 0, 88, 210, 336, 1000, 978, 90, 5, 11, 9, 77, 99, 100, 11, 55, 2, 3 , 55];</span></span><span class="javascript">        <span class="hljs-comment">//数据用随机算法去生成。为了方便看结果，这里是复制的。</span></span><span class="javascript">        <span class="hljs-keyword">var</span> arr1 = arr.sort();</span><span class="javascript">        <span class="hljs-keyword">var</span> arr2 = [...arr].sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123; <span class="hljs-keyword">return</span> a-b; &#125;)</span><span class="javascript">        <span class="hljs-comment">//带着疑问：~这个排序算是选择排序吧？</span></span><span class="javascript">        <span class="hljs-comment">//选择排序</span></span><span class="javascript">        <span class="hljs-keyword">var</span> arr3 = [];</span><span class="javascript">        <span class="hljs-keyword">var</span> arr_list = [...arr];</span><span class="javascript">        <span class="hljs-built_in">console</span>.time(<span class="hljs-string">&quot;选择排序耗时&quot;</span>)</span><span class="javascript">        <span class="hljs-keyword">while</span> (arr_list.length &gt; <span class="hljs-number">0</span>) &#123;</span><span class="javascript">            <span class="hljs-keyword">let</span> min = arr_list[<span class="hljs-number">0</span>];</span><span class="javascript">            <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;</span>            if (arr_list.length == 1) &#123;<span class="javascript">                <span class="hljs-keyword">let</span> item=arr_list.splice(index, <span class="hljs-number">1</span>); </span>                arr3.push(item); <span class="javascript">                <span class="hljs-keyword">break</span>;</span>            &#125;<span class="javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr_list.length; i++) &#123;</span><span class="javascript">                <span class="hljs-keyword">let</span> child = arr_list[i]; </span>                if (child &lt; min) &#123;                     min = child; index = i;                 &#125;                if (i == arr_list.length - 1) &#123; <span class="javascript">                    <span class="hljs-keyword">let</span> item = arr_list.splice(index, <span class="hljs-number">1</span>); </span>                    arr3.push(item);                 &#125;             &#125;         &#125;<span class="javascript">        <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">&quot;选择排序耗时&quot;</span>)</span><span class="javascript">        <span class="hljs-comment">//快速排序</span></span><span class="javascript">        <span class="hljs-keyword">var</span> arr_list2 = [...arr];</span><span class="javascript">        <span class="hljs-keyword">var</span> arr4 = [];</span><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sort</span>(<span class="hljs-params">arr</span>) </span>&#123;</span>            if (arr.length &lt;= 1) &#123;<span class="javascript">                <span class="hljs-comment">//递归出口</span></span><span class="javascript">                <span class="hljs-keyword">return</span> arr;</span>            &#125;<span class="javascript">            <span class="hljs-keyword">let</span> middleIndex = <span class="hljs-built_in">Math</span>.floor(arr.length / <span class="hljs-number">2</span>);<span class="hljs-comment">//中间数的下标 分奇偶</span></span><span class="javascript">            <span class="hljs-keyword">let</span> middle = arr[middleIndex];</span><span class="javascript">            <span class="hljs-keyword">let</span> left = [];</span><span class="javascript">            <span class="hljs-keyword">let</span> right = [];</span><span class="javascript">            <span class="hljs-function"><span class="hljs-title">for</span>(<span class="hljs-params"><span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++</span>)</span>&#123;</span><span class="javascript">                <span class="hljs-function"><span class="hljs-title">if</span>(<span class="hljs-params">arr[i] &lt; middle</span>)</span>&#123;</span>                    left.push(arr[i])                &#125;<span class="javascript">                <span class="hljs-keyword">else</span> <span class="hljs-function"><span class="hljs-title">if</span>(<span class="hljs-params">arr[i] &gt; middle</span>)</span>&#123;</span>                    right.push(arr[i])                &#125;<span class="javascript">                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i != middleIndex)&#123;</span>other.push(arr[i])&#125;            &#125;<span class="javascript">            <span class="hljs-keyword">return</span> sort(left).concat([middle], other, sort(right))</span>        &#125;<span class="javascript">        <span class="hljs-built_in">console</span>.time(<span class="hljs-string">&quot;快速排序耗时&quot;</span>)</span>        arr4 = sort(arr_list2);<span class="javascript">        <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">&quot;快速排序耗时&quot;</span>)</span><span class="javascript">        <span class="hljs-comment">//冒泡排序</span></span><span class="javascript">        <span class="hljs-keyword">var</span> arr_list3 = [...arr];</span><span class="javascript">        <span class="hljs-keyword">var</span> arr5 = [];</span><span class="javascript">        <span class="hljs-built_in">console</span>.time(<span class="hljs-string">&quot;冒泡排序耗时&quot;</span>)</span><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, len = arr_list3.length; i &lt; len; i++) &#123;</span><span class="javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; len - <span class="hljs-number">1</span> - i; j++) &#123;  <span class="hljs-comment">//j &lt; len - 1 -i是因为每次外围循环后，会把最大的放到最后，就可以省下1次循环</span></span>                if (arr_list3[j] &gt; arr_list3[j + 1]) &#123;<span class="javascript">                    <span class="hljs-keyword">let</span> tmp = arr_list3[j + <span class="hljs-number">1</span>]</span>                    arr_list3[j + 1] = arr_list3[j];                    arr_list3[j] = tmp;                &#125;            &#125;        &#125;<span class="javascript">        <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">&quot;冒泡排序耗时&quot;</span>)</span>        arr5 = arr_list3;<span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;result1&quot;</span>).innerText = <span class="hljs-string">`默认排序：<span class="hljs-subst">$&#123;arr1&#125;</span>`</span>;</span><span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;result2&quot;</span>).innerText = <span class="hljs-string">`a-b排序：<span class="hljs-subst">$&#123;arr2&#125;</span>`</span>;</span><span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;result3&quot;</span>).innerText = <span class="hljs-string">`选择排序：<span class="hljs-subst">$&#123;arr3&#125;</span>`</span>;</span><span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;result4&quot;</span>).innerText = <span class="hljs-string">`快速排序：<span class="hljs-subst">$&#123;arr4&#125;</span>`</span>;</span><span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;result5&quot;</span>).innerText = <span class="hljs-string">`冒泡排序：<span class="hljs-subst">$&#123;arr5&#125;</span>`</span>;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre><p>个人总结：当数据量小的时候，冒泡排序>选择排序>快速排序；当数据量大的时候，快速排序>冒泡排序>选择排序。当数据量越大，快速排序的优势便更明显。如果不想改变数据的相对位置，则选择冒泡排序。</p>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>Javascript试题收录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript笔记(三)</title>
    <link href="/2020/10/25/typescript-learn-note03/"/>
    <url>/2020/10/25/typescript-learn-note03/</url>
    
    <content type="html"><![CDATA[<p>字节流与utf-8编码字符串的转换</p><a id="more"></a><h2 id="章前知识"><a href="#章前知识" class="headerlink" title="章前知识"></a>章前知识</h2><p>1.在JavaScript中，所有的string类型（或者被称为DOMString）都是使用UTF-16编码的，至于为什么，度娘知道。<br>2.JS字符编码———— ASCII || Unicode || UTF-8</p><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>1.ascii编码通常是用1个字节表示字符，使用7位二进制数表示（剩下的1位为0，即0xxxxxxx），通常用来表示26个英文字母的大小写、数字0-9、标点符号以及一些特殊字符。<br>2.Unicode编码通常用2个字节表示字符，一些较为偏僻的字符就需要用到4个字节。<br>3.UTF-8编码是Unicode的实现方式之一，通常用3个字节表示1个汉字（UTF-8中文编码范围：u4e00-u9fa5，0x3400-0x4DB5）。</p><p>还有一些字符编码如gbk之类的，需要用再查询研究了。</p><h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><p>如果只有一个字节则其最高二进制位为0；如果是多字节，其第一个字节从最高位开始，连续的二进制位值为1的个数决定了其编码的位数，其余各字节均以10开头。UTF-8最多可用到6个字节。 </p><p>-1字节：0xxxxxxx<br>-2字节：110xxxxx 10xxxxxx<br>-3字节：1110xxxx 10xxxxxx 10xxxxxx<br>-4字节：11110xxx 10xxxxxx 10xxxxxx 10xxxxxx<br>-5字节：111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx<br>-6字节：1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>部分代码尚未读懂，后续待增加注释。</p><pre><code class="hljs angelscript">export <span class="hljs-keyword">class</span> <span class="hljs-symbol">StringCode</span>&#123;<span class="hljs-keyword">private</span> static inRange(a:number, min:number, max:number): <span class="hljs-built_in">bool</span>ean &#123;    <span class="hljs-keyword">return</span> min &lt;= a &amp;&amp; a &lt;= max;&#125;<span class="hljs-comment">/**  */</span><span class="hljs-keyword">private</span> static <span class="hljs-built_in">string</span>ToCodePoints(<span class="hljs-built_in">string</span>: <span class="hljs-built_in">string</span>): Array&lt;number&gt; &#123;let cps = [];let i = <span class="hljs-number">0</span>, n = <span class="hljs-built_in">string</span>.length;<span class="hljs-keyword">while</span> (i &lt; <span class="hljs-built_in">string</span>.length) &#123;let c = <span class="hljs-built_in">string</span>.charCodeAt(i);<span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.inRange(c, <span class="hljs-number">0xD800</span>, <span class="hljs-number">0xDFFF</span>)) &#123;cps.push(c);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.inRange(c, <span class="hljs-number">0xDC00</span>, <span class="hljs-number">0xDFFF</span>)) &#123;cps.push(<span class="hljs-number">0xFFFD</span>);&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// (inRange(c, 0xD800, 0xDBFF))</span><span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">1</span>) &#123;cps.push(<span class="hljs-number">0xFFFD</span>);&#125; <span class="hljs-keyword">else</span> &#123;let d = <span class="hljs-built_in">string</span>.charCodeAt(i + <span class="hljs-number">1</span>);<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.inRange(d, <span class="hljs-number">0xDC00</span>, <span class="hljs-number">0xDFFF</span>)) &#123;let a = c &amp; <span class="hljs-number">0x3FF</span>;let b = d &amp; <span class="hljs-number">0x3FF</span>;i += <span class="hljs-number">1</span>;cps.push(<span class="hljs-number">0x10000</span> + (a &lt;&lt; <span class="hljs-number">10</span>) + b);&#125; <span class="hljs-keyword">else</span> &#123;cps.push(<span class="hljs-number">0xFFFD</span>);&#125;&#125;&#125;i += <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">return</span> cps;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * u8intarray转utf-8</span><span class="hljs-comment"> * @param array Uint8Array字节流</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> static u8ArrayToUtf8Str(<span class="hljs-built_in">array</span>: Uint8Array): <span class="hljs-built_in">string</span> &#123;var <span class="hljs-keyword">out</span>, i, len, c;var char2, char3;<span class="hljs-keyword">out</span> = <span class="hljs-string">&quot;&quot;</span>;len = <span class="hljs-built_in">array</span>.length;i = <span class="hljs-number">0</span>;<span class="hljs-keyword">while</span> (i &lt; len) &#123;c = <span class="hljs-built_in">array</span>[i++];<span class="hljs-keyword">switch</span> (c &gt;&gt; <span class="hljs-number">4</span>) &#123;<span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<span class="hljs-comment">// 0xxxxxxx 1个字节</span><span class="hljs-keyword">out</span> += String.fromCharCode(c);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">12</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">13</span>:<span class="hljs-comment">// 110xxxxx 10xxxxxx 2个字节</span>char2 = <span class="hljs-built_in">array</span>[i++];<span class="hljs-keyword">out</span> += String.fromCharCode(((c &amp; <span class="hljs-number">0x1F</span>) &lt;&lt; <span class="hljs-number">6</span>) | (char2 &amp; <span class="hljs-number">0x3F</span>));<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">14</span>:<span class="hljs-comment">// 1110xxxx 10xxxxxx 10xxxxxx 3个字节</span>char2 = <span class="hljs-built_in">array</span>[i++];char3 = <span class="hljs-built_in">array</span>[i++];<span class="hljs-keyword">out</span> += String.fromCharCode(((c &amp; <span class="hljs-number">0x0F</span>) &lt;&lt; <span class="hljs-number">12</span>) |((char2 &amp; <span class="hljs-number">0x3F</span>) &lt;&lt; <span class="hljs-number">6</span>) |((char3 &amp; <span class="hljs-number">0x3F</span>) &lt;&lt; <span class="hljs-number">0</span>));<span class="hljs-keyword">break</span>;&#125;&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">out</span>;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * utf-8转u8intarray</span><span class="hljs-comment"> * @param str string 字符串</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> static utf8StrToU8Array(str: <span class="hljs-built_in">string</span>):Uint8Array &#123;let pos:number = <span class="hljs-number">0</span>;let codePoints = <span class="hljs-keyword">this</span>.<span class="hljs-built_in">string</span>ToCodePoints(str);let outputBytes = [];<span class="hljs-keyword">while</span> (codePoints.length &gt; pos) &#123;let code_point:number = codePoints[pos++];<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.inRange(code_point, <span class="hljs-number">0xD800</span>, <span class="hljs-number">0xDFFF</span>)) &#123;console.error(<span class="hljs-string">&quot;UTF8 encoderError&quot;</span>,code_point)&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.inRange(code_point, <span class="hljs-number">0x0000</span>, <span class="hljs-number">0x007f</span>)) &#123;outputBytes.push(code_point);&#125; <span class="hljs-keyword">else</span> &#123;let count = <span class="hljs-number">0</span>, offset = <span class="hljs-number">0</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.inRange(code_point, <span class="hljs-number">0x0080</span>, <span class="hljs-number">0x07FF</span>)) &#123;count = <span class="hljs-number">1</span>;offset = <span class="hljs-number">0xC0</span>;&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.inRange(code_point, <span class="hljs-number">0x0800</span>, <span class="hljs-number">0xFFFF</span>)) &#123;count = <span class="hljs-number">2</span>;offset = <span class="hljs-number">0xE0</span>;&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.inRange(code_point, <span class="hljs-number">0x10000</span>, <span class="hljs-number">0x10FFFF</span>)) &#123;count = <span class="hljs-number">3</span>;offset = <span class="hljs-number">0xF0</span>;&#125;outputBytes.push(Math.floor(code_point/Math.pow(<span class="hljs-number">64</span>, count)) + offset);<span class="hljs-keyword">while</span> (count &gt; <span class="hljs-number">0</span>) &#123;let temp = Math.floor(code_point/Math.pow(<span class="hljs-number">64</span>, count - <span class="hljs-number">1</span>));outputBytes.push(<span class="hljs-number">0x80</span> + (temp % <span class="hljs-number">64</span>));count -= <span class="hljs-number">1</span>;&#125;&#125;&#125;<span class="hljs-keyword">return</span> new Uint8Array(outputBytes);&#125;&#125;</code></pre><ul><li>参考博文：<a href="http://www.ruanyifeng.com/blog/2008/06/base64.html">Base64笔记</a></li><li>参考博文：<a href="http://blog.chinaunix.net/uid-52437-id-3325514.html">js下，二进制数据（编码utf8编码方式）转换到字符串</a></li><li>参考博文：<a href="https://blog.csdn.net/machinecat5888/article/details/81490930">UTF-8编码规则</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>各进制数之间的转换</title>
    <link href="/2020/10/22/network-programming-note1/"/>
    <url>/2020/10/22/network-programming-note1/</url>
    
    <content type="html"><![CDATA[<p>常用的各种进制数之间的转换公式。</p><a id="more"></a><h2 id="其他进制数转换为10进制数"><a href="#其他进制数转换为10进制数" class="headerlink" title="其他进制数转换为10进制数"></a>其他进制数转换为10进制数</h2><p>其他进制数转10进制数算法：从尾巴开始算起，依次乘以对应数值（例如2进制除数就是2,16进制除数就是16）的0~n次方（n值为尾巴算起的第几位-1，这里的尾巴起点仅代表个位数，如果有小数，则从-1次方开始算起）</p><pre><code class="hljs javascript"><span class="hljs-comment">//16进制数：0x07ff</span><span class="hljs-comment">//转化为10进制数的算法：f*16^0 + f*16^1 + 7*16^2 = 2047</span><span class="hljs-comment">//8进制数：52</span><span class="hljs-comment">//转化为10进制数的算法：2*8^0 + 5*8^1 = 42</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">otherToVal10</span>(<span class="hljs-params">num, val</span>)</span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">let</span> arr = [];<span class="hljs-keyword">let</span> numStr = num.toString();<span class="hljs-built_in">console</span>.log(numStr)arr = <span class="hljs-built_in">parseInt</span>(num) == num? arr.push(numStr) : arr.concat(numStr.split(<span class="hljs-string">&quot;.&quot;</span>));<span class="hljs-keyword">let</span> squareMax = arr[<span class="hljs-number">0</span>].length - <span class="hljs-number">1</span>;<span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr[<span class="hljs-number">0</span>].length; i++)&#123;result += <span class="hljs-built_in">Number</span>(arr[<span class="hljs-number">0</span>][i]) * <span class="hljs-built_in">Math</span>.pow(jinzhi, squareMax - i);&#125;<span class="hljs-keyword">if</span> (arr.length &gt; <span class="hljs-number">1</span>)&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr[<span class="hljs-number">1</span>].length; i++)&#123;result += <span class="hljs-built_in">Number</span>(arr[<span class="hljs-number">1</span>][i]) * <span class="hljs-built_in">Math</span>.pow(jinzhi, <span class="hljs-number">0</span> - <span class="hljs-number">1</span> - i);&#125;&#125;<span class="hljs-keyword">return</span> result;&#125;</code></pre><h2 id="10进制数转换为其他进制数"><a href="#10进制数转换为其他进制数" class="headerlink" title="10进制数转换为其他进制数"></a>10进制数转换为其他进制数</h2><p>10进制数转化为其他进制，只需要除以对应数值（例如2进制除数就是2,16进制除数就是16），记下商和余数；然后用商除以除数，继续记下商和余数；重复以上步骤直到商为0为止。然后余数逆序排列，就是对应要转化的进制数的结果。</p><pre><code class="hljs reasonml"><span class="hljs-comment">//10进制数：100</span><span class="hljs-comment">//转化为2进制数：</span><span class="hljs-comment">/**</span><span class="hljs-comment">* 100 / 2   商：50 余：0</span><span class="hljs-comment">*  50 / 2   商：25 余：0</span><span class="hljs-comment">*  25 / 2   商：12 余：1</span><span class="hljs-comment">*  12 / 2   商： 6 余：0</span><span class="hljs-comment">*   6 / 2   商： 3 余：0</span><span class="hljs-comment">*   3 / 2   商： 1 余：1</span><span class="hljs-comment">*   1 / 2   商： 0 余：1</span><span class="hljs-comment">**/</span><span class="hljs-comment">//结果：1100100</span><span class="hljs-comment">//10进制数：100</span><span class="hljs-comment">//转化为16进制数：</span><span class="hljs-comment">/**</span><span class="hljs-comment">* 100 / 16  商：6 余：4</span><span class="hljs-comment">*   6 / 16  商：0 余：6</span><span class="hljs-comment">**/</span><span class="hljs-comment">//结果：64</span><span class="hljs-keyword">function</span> <span class="hljs-constructor">Val10ToVal(<span class="hljs-params">num</span>, <span class="hljs-params">val</span>)</span>&#123;<span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;<span class="hljs-keyword">let</span> remainderArr = <span class="hljs-literal">[]</span>;<span class="hljs-keyword">do</span> &#123;<span class="hljs-keyword">let</span> remainder = num % <span class="hljs-keyword">val</span>;remainderArr.push(remainder);num = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>floor(num<span class="hljs-operator"> / </span><span class="hljs-keyword">val</span>);&#125;<span class="hljs-keyword">while</span> (num != <span class="hljs-number">0</span>)console.log(remainderArr);remainderArr = remainderArr.reverse<span class="hljs-literal">()</span>;result = <span class="hljs-constructor">Number(<span class="hljs-params">remainderArr</span>.<span class="hljs-params">join</span>(<span class="hljs-string">&quot;&quot;</span>)</span>);return result;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>网络编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>几个非常用运算符</title>
    <link href="/2020/10/22/network-programming-note2/"/>
    <url>/2020/10/22/network-programming-note2/</url>
    
    <content type="html"><![CDATA[<p>一些平时不常用到的运算符，但却经常见到的运算符。</p><a id="more"></a><h3 id="二进制转化"><a href="#二进制转化" class="headerlink" title="二进制转化"></a>二进制转化</h3><p style="text-indent:2rem;">以下运算符涉及二进制转化，此处说明一下十进制转换为二进制的方法：除二取余法。（除以2取余数，余数逆序排列.。二进制数一般为32位，不够的往前面添0。）</p><pre><code class="hljs [javascript]">&#x2F;&#x2F;十进制数转换为二进制&#x2F;&#x2F;例子一：5&#x2F;&#x2F;5&#x2F;2 &#x3D; 2 ... 1&#x2F;&#x2F;2&#x2F;2 &#x3D; 1 ... 0&#x2F;&#x2F;1&#x2F;2 &#x3D; 0 ... 1&#x2F;&#x2F;因此，（十进制数）5转化为（二进制数）就是101，二进制数一般为32位，不够的往前面添0。&#x2F;&#x2F;即0000 0000 0000 0000  0000 0000 0000 0101&#x2F;&#x2F;例子二：24&#x2F;&#x2F;24&#x2F;2 &#x3D; 12 ... 0&#x2F;&#x2F;12&#x2F;2 &#x3D; 6  ... 0&#x2F;&#x2F;6&#x2F;2 &#x3D; 3   ... 0&#x2F;&#x2F;3&#x2F;2 &#x3D; 1   ... 1&#x2F;&#x2F;1&#x2F;2 &#x3D; 0   ... 1&#x2F;&#x2F;因此，（十进制数）24转化为（二进制数）就是11000，二进制数一般为32位，不够的往前面添0。&#x2F;&#x2F;即0000 0000 0000 0000  0000 0000 0001 1000&#x2F;&#x2F;例子三：20&#x2F;&#x2F;20&#x2F;2 &#x3D; 10 ... 0&#x2F;&#x2F;10&#x2F;2 &#x3D; 5  ... 0&#x2F;&#x2F;5&#x2F;2 &#x3D; 2   ... 1&#x2F;&#x2F;2&#x2F;2 &#x3D; 1   ... 0&#x2F;&#x2F;1&#x2F;2 &#x3D; 0   ... 1&#x2F;&#x2F;即0000 0000 0000 0000  0000 0000 0001 0100</code></pre><h3 id="“-lt-lt-”运算符"><a href="#“-lt-lt-”运算符" class="headerlink" title="“&lt;&lt;”运算符"></a>“&lt;&lt;”运算符</h3><pre><code class="hljs [javascript]">&#x2F;&#x2F;&quot;&lt;&lt;&quot;运算符：用于对二进制数左移多少位。1 &lt;&lt; 0 &#x2F;&#x2F;结果：11 &lt;&lt; 1 &#x2F;&#x2F;结果：21 &lt;&lt; 2 &#x2F;&#x2F;结果：41 &lt;&lt; 10 &#x2F;&#x2F;结果：10245 &lt;&lt; 10 &#x2F;&#x2F;结果：5120&#x2F;&#x2F;由上可得x &lt;&lt; y 相当于 x * 2^y&#x2F;&#x2F;较为常用的例子：const kb &#x3D; 1 &lt;&lt; 10; &#x2F;&#x2F;1024const mb &#x3D; kb &lt;&lt; 10; &#x2F;&#x2F;1048576const tb &#x3D; mb &lt;&lt; 10; const gb &#x3D; tb &lt;&lt; 10;</code></pre><h3 id="“-amp-”运算符"><a href="#“-amp-”运算符" class="headerlink" title="“&amp;”运算符"></a>“&amp;”运算符</h3><pre><code class="hljs [javascript]">&#x2F;&#x2F;&quot;&amp;&quot;运算符：用于对两个二进制操作数逐位“位与”进行比较。&#x2F;&#x2F;“位与”即1&amp;&amp;1&#x3D;&#x3D;1, 1&amp;&amp;0&#x3D;&#x3D;0, 0&amp;&amp;0&#x3D;&#x3D;0&#x2F;&#x2F;平时我们使用的数字都是十进制数，该方法是对转化后的二进制数进行比较。&#x2F;&#x2F;&quot;&amp;&quot;运算符就是比较二进制中为true的值提取出来，然后逐位计算true或false。24 &amp; 5 &#x2F;&#x2F;结果：0&#x2F;&#x2F;具体规则：逐位进行比较，例如1 &amp;&amp; 0 结果就是 0&#x2F;&#x2F;数值5： 0000 0000 0000 0000  0000 0000 0000 0101&#x2F;&#x2F;数值24：0000 0000 0000 0000  0000 0000 0001 1000&#x2F;&#x2F;结果：  0000 0000 0000 0000  0000 0000 0000 000024 &amp; 20 &#x2F;&#x2F;结果：16&#x2F;&#x2F;数值24：0000 0000 0000 0000  0000 0000 0001 1000&#x2F;&#x2F;数值20：0000 0000 0000 0000  0000 0000 0001 0100&#x2F;&#x2F;结果：  0000 0000 0000 0000  0000 0000 0001 0000</code></pre><h3 id="“-”运算符"><a href="#“-”运算符" class="headerlink" title="“^”运算符"></a>“^”运算符</h3><pre><code class="hljs [javascript]">&#x2F;&#x2F;&quot;^&quot;运算符：用于对两个二进制操作数逐位“位异或”进行比较。&#x2F;&#x2F;“位异或”即1&amp;&amp;0&#x3D;&#x3D;1 1&amp;&amp;1&#x3D;&#x3D;0 0&amp;&amp;0&#x3D;&#x3D;024 &amp; 5 &#x2F;&#x2F;结果：29&#x2F;&#x2F;具体规则：逐位进行比较，例如1 &amp;&amp; 0 结果就是 1&#x2F;&#x2F;数值5： 0000 0000 0000 0000  0000 0000 0000 0101&#x2F;&#x2F;数值24：0000 0000 0000 0000  0000 0000 0001 1000&#x2F;&#x2F;结果：  0000 0000 0000 0000  0000 0000 0001 1101</code></pre><h3 id="“-”运算符-1"><a href="#“-”运算符-1" class="headerlink" title="“|”运算符"></a>“|”运算符</h3><pre><code class="hljs [javascript]">&#x2F;&#x2F;&quot;|&quot;运算符用于对两个二进制操作数逐位进行“位或”比较。&#x2F;&#x2F;“位与”即1||1&#x3D;&#x3D;1, 1||0&#x3D;&#x3D;1, 0||0&#x3D;&#x3D;0&#x2F;&#x2F;其他与&quot;&amp;&quot;运算符相似24 &amp; 5 &#x2F;&#x2F;结果：29&#x2F;&#x2F;具体规则：逐位进行比较，例如1 &amp;&amp; 0 结果就是 1&#x2F;&#x2F;数值5： 0000 0000 0000 0000  0000 0000 0000 0101&#x2F;&#x2F;数值24：0000 0000 0000 0000  0000 0000 0001 1000&#x2F;&#x2F;结果：  0000 0000 0000 0000  0000 0000 0001 1101</code></pre><h3 id="“-”运算符-2"><a href="#“-”运算符-2" class="headerlink" title="“~”运算符"></a>“~”运算符</h3><pre><code class="hljs [javascript]">&#x2F;&#x2F;&quot;~&quot;运算符：简单理解为取负运算，再减去1~24 &#x2F;&#x2F;结果：-25 即：-24-1~10 &#x2F;&#x2F;结果：-11 即：-10-1</code></pre>]]></content>
    
    
    <categories>
      
      <category>网络编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript笔记(二)</title>
    <link href="/2020/08/14/typescript-learn-note02/"/>
    <url>/2020/08/14/typescript-learn-note02/</url>
    
    <content type="html"><![CDATA[<style>    p {        text-indent: 2rem;    }</style><p>this指向问题</p><a id="more"></a><h2 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h2><ul><li>普通函数</li><li>箭头函数</li></ul><h3 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h3><p>this永远指向的是最后调用它的对象，也就是看它执行的时候是谁调用的。</p><pre><code class="hljs javascript"><span class="hljs-comment">//例子1</span><span class="hljs-comment">//引用logger的printName方法</span><span class="hljs-comment">//调用的时候是window环境</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Logger</span> </span>&#123;  <span class="hljs-function"><span class="hljs-title">printName</span>(<span class="hljs-params">name = <span class="hljs-string">&#x27;there&#x27;</span></span>)</span> &#123;    <span class="hljs-built_in">this</span>.print(<span class="hljs-string">`Hello <span class="hljs-subst">$&#123;name&#125;</span>`</span>);  &#125;  <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-params">text</span>)</span> &#123;    <span class="hljs-built_in">console</span>.log(text);  &#125;&#125;<span class="hljs-keyword">const</span> logger = <span class="hljs-keyword">new</span> Logger();<span class="hljs-keyword">const</span> &#123; printName &#125; = logger;printName(); <span class="hljs-comment">//报错print no undefined</span></code></pre><p>稍作修改，把printName方法绑定在logger类中。</p><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Logger</span> </span>&#123;  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;    <span class="hljs-built_in">this</span>.printName = <span class="hljs-built_in">this</span>.printName.bind(<span class="hljs-built_in">this</span>);  &#125;    <span class="hljs-function"><span class="hljs-title">printName</span>(<span class="hljs-params">name = <span class="hljs-string">&#x27;there&#x27;</span></span>)</span> &#123;    <span class="hljs-built_in">this</span>.print(<span class="hljs-string">`Hello <span class="hljs-subst">$&#123;name&#125;</span>`</span>);  &#125;  <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-params">text</span>)</span> &#123;    <span class="hljs-built_in">console</span>.log(text);  &#125;&#125;<span class="hljs-keyword">const</span> logger = <span class="hljs-keyword">new</span> Logger();<span class="hljs-keyword">const</span> &#123; printName &#125; = logger;printName(); <span class="hljs-comment">//hello there</span></code></pre><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>this指向它的上下文环境。</p><pre><code class="hljs javascript"><span class="hljs-comment">//箭头函数</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Obj</span> </span>&#123;  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;      <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;Lily&quot;</span>;      <span class="hljs-built_in">this</span>.getName = <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">this</span>.name;  &#125;&#125;<span class="hljs-keyword">const</span> myObj = <span class="hljs-keyword">new</span> Obj();<span class="hljs-keyword">const</span> &#123; getName &#125; = myObj ;getName(); <span class="hljs-comment">//Lily </span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>下面是其他的几个例子。</p><pre><code class="hljs javascript"><span class="hljs-comment">//普通函数</span><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;my name is window&#x27;</span>;  <span class="hljs-keyword">var</span> obj = &#123;      name: <span class="hljs-string">&#x27;my name is obj&#x27;</span>,      fn: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;          <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;          <span class="hljs-built_in">clearInterval</span>(timer);          timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;              <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);  <span class="hljs-comment">//my name is window</span>          &#125;, <span class="hljs-number">1000</span>)     &#125; &#125;<span class="hljs-comment">//箭头函数</span><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;my name is window&#x27;</span>;  <span class="hljs-keyword">var</span> obj = &#123;      name: <span class="hljs-string">&#x27;my name is obj&#x27;</span>,      fn: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;          <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;          <span class="hljs-built_in">clearInterval</span>(timer);          timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;              <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);  <span class="hljs-comment">//my name is obj</span>          &#125;, <span class="hljs-number">1000</span>)     &#125; &#125; <span class="hljs-comment">//其余写法，利用变量赋值this</span> <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;my name is window&quot;</span>;   <span class="hljs-keyword">var</span> obj = &#123;      name: <span class="hljs-string">&#x27;my name is obj&#x27;</span>,      self = <span class="hljs-built_in">this</span>;       fn: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;          <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;          <span class="hljs-built_in">clearInterval</span>(timer);          timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;              <span class="hljs-built_in">console</span>.log(self.name);  <span class="hljs-comment">//my name is obj</span>          &#125;, <span class="hljs-number">1000</span>)     &#125; &#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript笔记(一)</title>
    <link href="/2020/08/12/typescript-learn-note01/"/>
    <url>/2020/08/12/typescript-learn-note01/</url>
    
    <content type="html"><![CDATA[<p>interface、implements、extends以及泛型</p><a id="more"></a><style>    p {        text-indent: 2rem;    }</style><h2 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h2><p>interface：接口，其作用与函数有点类似，函数规定了需要传递哪些参数，而接口则是规定某个对象应该拥有哪些属性或方法（只是声明成员方法，不作实现）。</p><pre><code class="hljs angelscript"><span class="hljs-comment">// IBagView 和 IItemView 就是一个接口</span><span class="hljs-keyword">interface</span> <span class="hljs-symbol">IBagView</span> &#123;    time: number;    count?: number; <span class="hljs-comment">//可选参数</span>    update(<span class="hljs-built_in">int</span>erval: number);    <span class="hljs-built_in">ref</span>resh();&#125;<span class="hljs-keyword">interface</span> <span class="hljs-symbol">IItemView</span> &#123;    updateItem(item, args);&#125;</code></pre><h2 id="implements"><a href="#implements" class="headerlink" title="implements"></a>implements</h2><p>implements：实现，实现对应接口的对应方法或者环境变量，可以使用一个或者多个包含能的接口。实现了接口的类必须包含接口的所有成员方法。</p><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">BagView</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">IBagView, <span class="hljs-symbol">IItemView</span></span> &#123;    <span class="hljs-keyword">public</span> time = <span class="hljs-number">0</span>;    <span class="hljs-keyword">public</span> update(<span class="hljs-built_in">int</span>erval, number) &#123;&#125;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">ref</span>resh():<span class="hljs-built_in">void</span>  &#123;&#125;    <span class="hljs-keyword">public</span> updateItem(item: any) &#123;&#125;    <span class="hljs-keyword">public</span> update(item, args) &#123;&#125;&#125;</code></pre><h2 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h2><p>extends：继承，继承的子类可以选择不需要重新定义类的结构及成员方法，如果子类重写了，则对象的方法或者变量会被子类覆盖。</p><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonBagView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BagView</span></span><span class="hljs-class"></span>&#123;    constructor() &#123;        <span class="hljs-keyword">super</span>();    &#125;    public refresh():void  &#123;        <span class="hljs-comment">//会覆盖父级的方法</span>        <span class="hljs-comment">//可以使用super.refresh();进行继承</span>    &#125;&#125;</code></pre><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型：泛型多被用来创建可重用的组件，一个组件可以支持多种数据类型。</p><h3 id="假如不使用泛型"><a href="#假如不使用泛型" class="headerlink" title="假如不使用泛型"></a>假如不使用泛型</h3><pre><code class="hljs csharp"><span class="hljs-comment">//这种数据类型就规定了必须使用Number类型</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">getParam</span>(<span class="hljs-params">param: number</span>): number</span> &#123;    <span class="hljs-keyword">return</span> param;&#125;<span class="hljs-comment">//如果使用any，就无法准确知晓它的返回值类型</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">getParam</span>(<span class="hljs-params">param: any</span>): any</span> &#123;    <span class="hljs-keyword">return</span> param;&#125;</code></pre><h3 id="使用泛型"><a href="#使用泛型" class="headerlink" title="使用泛型"></a>使用泛型</h3><pre><code class="hljs csharp"><span class="hljs-comment">//传入什么类型，返回值就是什么类型</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">getParam</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">param: T</span>): T</span> &#123;    <span class="hljs-keyword">return</span> param;&#125;</code></pre><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><pre><code class="hljs csharp"><span class="hljs-comment">//配合interface使用可以对泛型进行约束</span><span class="hljs-comment">//当然，被约束的泛型不再适用于任意类型</span><span class="hljs-keyword">interface</span> <span class="hljs-title">IBaseView</span> &#123;    viewName: <span class="hljs-built_in">string</span>;    viewId: number;&#125;<span class="hljs-comment">//getView方法中进行了泛型约束</span><span class="hljs-comment">//那么调用这个方法时必须满足IBaseView的接口条件</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">getView</span>&lt;<span class="hljs-title">T</span> <span class="hljs-title">extends</span> <span class="hljs-title">IBaseView</span>&gt;(<span class="hljs-params">view: T</span>): T</span> &#123;    <span class="hljs-keyword">return</span> view;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>努力，是为了遇见更好的自己。</title>
    <link href="/2020/07/23/hello-liuyifeng/"/>
    <url>/2020/07/23/hello-liuyifeng/</url>
    
    <content type="html"><![CDATA[<p><img src="/background/park0001.jpg"></p><p style="text-indent:2rem;">生活依旧在继续，你能做的唯有努力。</p>]]></content>
    
    
    <categories>
      
      <category>我的随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我的随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
